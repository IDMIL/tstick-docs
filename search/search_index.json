{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About us","text":"<p>The T-Stick is a DMI conceived by Joseph Malloch and D. Andrew Stewart at the Input Devices and Music Interaction Laboratory (IDMIL) at McGill University. It has been in development since 2006, has a relatively long history for a DMI, has multiple versions, several expert performers, and has an associated repertoire. More than 20 copies have been built unintended for commercial use. Nevertheless, it has been adopted by expert performers and composers as part of their musical practice including D. Andrew Stewart (Soprano user) and Fernando Rocha (Tenor user). It has appeared in dozens of public appearances in countries such as Canada, USA, Brazil, Italy, Norway, and Portugal.</p>"},{"location":"#read-more","title":"Read More","text":"<ul> <li> Source Code</li> <li> Project Website</li> </ul>"},{"location":"community/contribution/","title":"Contribution Guide","text":"<p>The guide offers general rules and guidelines for pushing changes to the documentation site. We accept pull requests on github for new pages/sections and major/minor edits to existing pages. The site is powered by Material for MkDocs. We recommend reading their documentation for an understanding of how it works. Each page is written as a markdown file.</p>"},{"location":"community/contribution/#general-rules","title":"General Rules","text":"<ol> <li>Check how the page renders before submitting pull requests. Material for MkDocs Getting Started page shows how to set Material for MkDocs.</li> <li>Add your page to the navigation tree in mkdocs.yml, in the appropriate location so that it shows up in the sidebar.</li> <li>Ensure your pages are readable in both light mode and dark mode. </li> </ol>"},{"location":"community/contribution/#new-pagesection-guidelines","title":"New Page/Section Guidelines","text":"<ol> <li>Include description of page/section in the pull request.</li> <li>Only ONE new page/section per pull request.</li> <li>Check the structure of other similar pages for inspiration.</li> <li>Avoid table of content trees with a depth of greater than three. (ie: main page -&gt; subpage -&gt; subpage, depth = 3)</li> </ol>"},{"location":"community/contribution/#majorminor-edits-guidelines","title":"Major/Minor Edits Guidelines","text":"<ol> <li>Describe reason for the edit in the pull request.</li> <li>Only have ONE major edit per pull requests. You may include multiple minor edits in a single request.</li> </ol>"},{"location":"community/performances/","title":"Performances","text":""},{"location":"community/performances/#videos","title":"Videos","text":""},{"location":"community/performances/#fernando-rocha-the-one","title":"Fernando Rocha - The One","text":"<p>Brazilian percussionist Fernando Rocha performing D. Andrew Stewart's piece \"The One\" on Tenor T-Stick at McGill University. The T-Stick is a digital musical instrument designed and constructed by Joseph Malloch at the IDMIL.</p>"},{"location":"community/performances/#dandrew-stewart-everybody-to-the-power-of-one","title":"D.Andrew Stewart \u2013 Everybody to the Power of One","text":"<p>This is a video of composer/performer D. Andrew Stewart playing his composition \"Everybody to the power of one\" on a soprano T-Stick, which he calls the \"sonar jo,\" at the SAT in Montr\u00e9al. The T-Stick is a digital musical instrument I designed and built in the Input Devices and Music Interaction Lab at McGill University. Andrew was a collaborator on the T-Stick project, along with percussionist Fernando Rocha, pianist Xenia Pestova and cellist Erika Donald.</p>"},{"location":"community/performances/#new-calgary-with-winds-for-soprano-t-stick","title":"New Calgary - WITH WINDS for Soprano T-Stick","text":"<p>A performance in the wonderful acoustic of Eckhardt-Gramatt\u00e9 Hall (Rozsa Centre, The University of Calgary) as part of \u201cFrom Up There and Down\u201d (New Works Calgary concert season, 2012-13). WITH WINDS is the first of a series of pieces showcasing new performance modes developed during the 2010 T-Stick Composition Workshops.</p>"},{"location":"community/performances/#antoine-goudreau-les-multiples-usages-du-mot-geste-for-sopranino-t-stick","title":"Antoine Goudreau \u2013 Les multiples usages du mot \u201cgeste\u201d for sopranino T-Stick","text":"<p>Title \u2013 Les multiples usages du mot \u201cgeste\u201d for sopranino T-Stick Composer \u2013 Antoine Goudreau Performer \u2013 Jean-Christophe Melan\u00e7on Event \u2013 the Vivier InterUniversitaire\u2019s/Inter-University collaboration project Date \u2013 June 4, 2021 Venue \u2013 G\u00c9SU, Montreal </p>"},{"location":"community/performances/#dandrew-stewart-dweller-within-for-sopranino-t-stick","title":"D.Andrew Stewart \u2013 Dweller within for sopranino T-stick","text":"<p>Title \u2013 Dweller within for sopranino T-stick Composer \u2013 D.Andrew Stewart Event \u2013 live@CIRMMT: CIRMMT Composers Date \u2013 Feb 13, 2020 Venue \u2013 Music Multimedia Room, Montreal </p>"},{"location":"community/performances/#blablatrains-ana-dallara-majek-and-takuto-fukuda-higher-order-gestalt-fromage-for-two-t-sticks-and-24-channel-loudspeaker-array","title":"blablaTrains (Ana Dall\u2019Ara-Majek and Takuto Fukuda) \u2013 Higher Order Gestalt Fromage for two T-Sticks and 24 channel loudspeaker array","text":"<p>Title \u2013 Higher Order Gestalt Fromage, for two soprano T-Sticks and 24 channel loudspeaker array Composer \u2013 blablaTrains (Ana Dall\u2019Ara-Majek and Takuto Fukuda) Event \u2013 live@CIRMMT: CIRMMT Composers Date \u2013 Feb 13, 2020 Venue \u2013 Music Multimedia Room, Montreal </p>"},{"location":"community/performances/#vincent-cusson-balance-for-t-stick","title":"Vincent Cusson \u2013 Balance, for T-Stick","text":"<p>Title \u2013 Balance Artist \u2013 Vincent Cusson Event \u2013 improv@CIRMMT: T-Stick Music Creation Project Date \u2013 Feb 11, 2020 Venue \u2013 La Vitrola, Montreal </p>"},{"location":"community/performances/#kasey-pocius-synthetic-icescapes-for-t-stick-and-clork","title":"Kasey Pocius \u2013 Synthetic Icescapes, for T-Stick and CLOrk","text":"<p>Title \u2013 Synthetic Icescapes, for T-Stick and five laptops (Concordia laptop orchestra \u2013 CLOrk) Composer \u2013 Kasey Pocius Laptops \u2013 Danielle Savage, Arturo Hidalgo, Gabriel Gustafsson, Liam Mansfield and D. Andrew Stewart Event \u2013 improv@CIRMMT: T-Stick Music Creation Project Date \u2013 Feb 11, 2020 Venue \u2013 La Vitrola, Montreal </p>"},{"location":"community/performances/#group-improvisation-for-5-t-sticks","title":"Group improvisation for 5 T-Sticks","text":"<p>Title \u2013 Group improvisation for 5 T-Sticks Direction \u2013 D.Andrew Stewart T-Stick \u2013 Yanik Tremblay-Simard, Kasey Pocius, Erich Barganier, Michal Seta and D.Andrew Stewart Event \u2013 improv@CIRMMT: T-Stick Music Creation Project Date \u2013 Feb 11, 2020 Venue \u2013 La Vitrola, Montreal </p>"},{"location":"community/performances/#michal-seta-memoidalaube-for-t-stick","title":"Michal Seta \u2013 Memoidalaube, for T-Stick","text":"<p>Title \u2013 Memoidalaube Composer \u2013 Michal Seta T-Stick \u2013 Michal Seta and D. Andrew Stewart Event \u2013 improv@CIRMMT: T-Stick Music Creation Project Date \u2013 Feb 11, 2020 Venue \u2013 La Vitrola, Montreal </p>"},{"location":"community/performances/#erich-barganier-the-taxidermy-of-negative-space-for-t-stick-and-dance","title":"Erich Barganier \u2013 The taxidermy of negative space, for T-Stick and dance","text":"<p>Title \u2013 The taxidermy of negative space, for T-Stick and dance Composer \u2013 Erich Barganier Dance/T-Stick \u2013 V\u00e2nia Eger Pontes Laptop \u2013 Erich Barganier Event \u2013 improv@CIRMMT: T-Stick Music Creation Project Date \u2013 Feb 11, 2020 Venue \u2013 La Vitrola, Montreal </p>"},{"location":"community/performances/#d-andrew-stewart-still-life-eviction-for-soprano-t-stick","title":"D. Andrew Stewart - Still Life: Eviction for soprano t-stick","text":""},{"location":"community/performances/#guitarami-t-stick-sopranino","title":"GuitarAMI + T-Stick Sopranino:","text":""},{"location":"community/performances/#trouveur-victor-baez-steve-cowan-guitarami-edu-meneses-t-stick","title":"Trouveur (Victor Baez). Steve Cowan \u2013 GuitarAMI, Edu Meneses \u2013 T-Stick","text":""},{"location":"community/performances/#partial-list-of-public-appearances","title":"Partial list of Public Appearances","text":"Date Type Event Location 2006/04 concert seminar concert Montreal, Canada 2006/11 recital Fernando Rocha DMus lecture recital Montreal, Canada 2007/06 presentation New Interfaces for Musical Expression Conference New York, USA 2007/09 demonstrations Wired Nextfest Low Angeles, USA 2008/02 demonstrations Innovaction Udine, Italy 2008/03 concert MusiMars Festival Montreal, Canada 2008/04 concert Music+Technology Incubator Montreal, Canada 2008/07 concert, workshop Sound Symposium St. John\u2019s, Canada 2008/09 concert Le Vivier relaunch Montreal, Canada 2008/10 concerts Duo pour un violoncelle et un danseur Montreal, Canada 2009/02 competition Guthman competition Atlanta, USA 2009/07 workshop SMC Summer School, used T-Stick to control robotic Gamelan Porto, Portugal 2009/08 concert International Computer Music Conference Montreal, Canada 2009/10 workshop Society for Music Theory, workshop on listening through time Montreal, Canada 2009/12 concert live@CIRMMT Montreal, Canada 2010/04 concert ACM CHI Conference Atlanta, USA 2010/04 concert Viagem, 5 T-Sticks played by blind performers Porto, Portugal 2010/07 workshops launch of 2010 T-Stick Composition Workshops Montreal, Canada 2010/08 talk, performance Expansive Spirits, Toronto Electroacoustic Symposium Toronto, Canada 2010/12 talk Electronic Music Foundation New York, USA 2011/02 concert Ghost in the Machine Conference Montreal, Canada 2011/03 concert Concerto for T-Stick and two laptop orchestras, Concordia Laptop Orchestra and Cybernetic Orchestra Montreal, Canada 2011/04 concert Open Ears Festival Kitchener, Canada 2011/05 concert Issue Project Room New York, USA 2011/05 concert New Interfaces for Musical Expression Conference Oslo, Norway 2011/06 concerts Universidade Federal de Minas Gerais Belo Horizonte, Brazil 2011/06 concert Sforzando Late Night Concert, Electroacoustic Music Studies Network New York, USA 2011/11 concert Sea of Sound Festival Edmonton, Canada 2012/03 concert Experimental Music from Brazil and Beyond Lethbridge, Canada 2012/06 concert Concierto, Andrew Stewart y Ensemble 3 Mexico 2012/09 concert Moving Sound, Electroacoustic works by D. Andrew Stewart and Rolf Boon Lethbridge, Canada 2012/11 concert 24 Frames, Improvisation with Tim Brady Lethbridge, Canada 2013/03 concert From Up There and Down, New Works Calgary Calgary, Canada 2013/05 concert New Interfaces for Musical Expression Conference Daejeon, South Korea 2013/09 concert Percussive Arts Society International Convention Indianapolis, USA 2014/03 performance Still Life: Eviction for soprano t-stick Lethbridge, Canada 2014/03 performance Improvisation \u00e0 trois Lethbridge, Canada 2019/11 workshop T-Stick Workshop CIRMMT in Montreal, Canada 2019/11 project The T-Stick Music Creation Project Montreal, Canada 2020/02 workshop T-Stick Workshop CIRMMT in Montreal, Canada 2020/02 performance Vincent Cusson: Balance, for T-Stick La Vitrola in Montreal, Canada 2020/02 performance Michel Seta: Memoidalaube, for T-Stick La Vitrola in Montreal, Canada 2020/02 performance Kasey Pocius: Synthetic Icescapes, for T-Stick and CLork La Vitrola in Montreal, Canada 2020/02 performance Erich Barganier: The Taxidermy of Negative Space, for T-Stick and Dance La Vitrola in Montreal, Canada 2020/02 performance Group Improv for 5 T-Sticks La Vitrola in Montreal, Canada 2020/02 workshop D. Andrew Stewart: x1: Performance principles of a T-Stick instrumentalist UdeM in Montreal, Canada 2020/02 performance blablaTrains(Takuto Fukuda &amp; Ana Dall'Ara-Majek): Higher-Order Geshtalt Fromage for two T-Sticks MMR in Montreal, Canada 2020/02 performance D. Andrew Stewart: Dweller within for soprano T-Stick MMR in Montreal, Canada 2020/02 workshop Le T-Stick - Atelier jeunesse Le Vivier in Montreal, Canada 2021/06 performance Alt F in Front of the Body for karlax  (D. Andrew Stewart), sopranino t-stick (Micha\u0142 Seta) and phallophone (Dirk Stromberg) Hubs virtual collaboration platform. Artists in Montreal, Singapore and Lethbridge 2024/06 album Album: Into the Void https://exitpoints.bandcamp.com/album/into-the-void"},{"location":"community/publications/","title":"Publications","text":"<ul> <li>Malloch, J., Wanderley, M. M. (2007). The T-Stick : From Musical Interface to Musical Instrument. In Proceedings of the 2007 International Conference on New Interfaces for Musical Expression (NIME 2007) (pp. 66--69). New York City, NY, USA.</li> <li>Nieva, A., Wang, J., Malloch, J., Wanderley, M. M. (2018). The T-Stick: Maintaining a 12 year-old digital musical instrument. In Proceedings of the 2018 International Conference on New Interfaces for Musical Expression (NIME 2018) (pp. 198\u2013199). Blacksburg, VA, USA.</li> <li>Meneses, E. A. L., Fukuda, T., Wanderley, M. M. (2020). Expanding and Embedding a High-level Gesture Vocabulary for the Digital and Augmented Musical Instruments. In Proc. of the International Conference on Human-Computer Interaction (HCII). Copenhagen, Denmark.</li> <li>Calegario, F., Wanderley, M., Tragtenberg, J., Wang, J., Sullivan, J., Meneses, E., Franco, I., Kirkegaard, M., Bredholt, M., Rohs, J. (2020). Probatio 1.0: collaborative development of a toolkit for functional DMI prototypes. In Proceedings of the 2020 International Conference on New Interfaces for Musical Expression (NIME 2020) (pp. 6). Birmingham, UK.</li> <li>West, T. (2020). Making Mappings: Examining the Design Process with Libmapper and the T-Stick. In M.A. Thesis, McGill University (pp. 78). Montreal, Canada.</li> <li>Fukuda, T., Meneses, E., West, T. J., Wanderley, M. M. (2021). The T-Stick Music Creation Project: An approach to building a creative community around a DMI. In Proceedings of the 2021 International Conference on New Interfaces for Musical Expression (NIME 2021). Shanghai, China.</li> <li>Meneses, E. A. L. (2022). Iterative Design in DMIs and AMIs: Expanding and embedding a high-level gesture vocabulary for the T-Stick and GuitarAMI. In Ph.D. Thesis, McGill University. McGill University.Montreal, Qc, Canada.</li> <li>Fukuda, T., Wanderley, M. M. (2023). T-Patch: a software application for T-Stick Digital Musical Instruments Mexico City, MX. In Proceedings of the 2023 International Conference on New Interfaces for Musical Expression (NIME2023). Mexico City, MX.</li> <li>Niyonsenga, A., Wanderley, M. M. (2023). Tools and Techniques for the Maintenance and Support of Digital Musical Instruments. In Proceedings of the 2023 International Conference on New Interfaces for Musical Expression (NIME2023). Mexico City, MX.</li> </ul>"},{"location":"designs/tstick-4gw/","title":"General Information","text":""},{"location":"designs/tstick-4gw/#introduction","title":"Introduction","text":"<p>The T-Stick 4GW was designed by Eduardo Meneses and Alex Nieva with the first revision being completed in 2018. This generation of T-Sticks is a Wi-Fi based system using Open Sound Control and later Libmapper for sending signals. It uses the ESP32 microcontroller for controlling the T-Stick. Multiple development boards such as the Lolin D32 and TinyPico have been used with this design. Although the design is modular and can in theory support T-Sticks up to the length of a Tenor T-Stick. Limitations due to how the T-Stick is constructed and firmware makes this design appropriate only for Sopranino and Soprano T-Sticks.</p>"},{"location":"designs/tstick-4gw/#guides","title":"Guides","text":"<p>For information on how to use the T-Stick 4GW check out the guides below:</p> <ul> <li> Build Guide</li> <li> Flashing Guide</li> <li> Connection Guide</li> </ul>"},{"location":"designs/tstick-4gw/#4th-generation-t-sticks","title":"4th Generation T-Sticks","text":"<p>Click each box to get more information on each variant of the T-Stick 4GW</p> <ul> <li> <p>T-Stick 4GW 2018 </p> <p>An ESP32 based T-Stick using the LolinD32 Development board and a custom touch board.</p> <p> More Details</p> </li> <li> <p>T-Stick 4GW 2023 </p> <p>An ESP32 based T-Stick using the TinyPico Development board and Bela Trill Touch Board.</p> <p> More Details</p> </li> </ul>"},{"location":"designs/tstick-4gw/build-guide/","title":"Building a Sopranino T-Stick 4GW","text":"4GW-20184GW-2021"},{"location":"designs/tstick-4gw/build-guide/#bill-of-materials","title":"Bill of Materials:","text":"Qty Type Description 01 sensor Capsense breakout board (CY8CMBR3116) 01 sensor IMU breakout board LSM9DS 01 sensor FSR 408 01 sensor buzz elem. piezo STD 01 electronics microcontroller Lolin D32 Pro 01 electronics 0.1uF capacitor 01 electronics 1K resistor 01 electronics 10K resistor 01 electronics 2M resistor 01 electronics Diode 1N4004 01 electronics 10K potentiometer 01 electronics LM358P Opamp 01 electronics button 02 electronics SH1.0 cables 02 electronics Breadboards 30cm manufacturing parts PVC Tube split in 2 lenghtwise ~85cm manufacturing parts Copper adhesive tape 01 manufacturing parts Li-Po Battery (min 1000mA) 01 manufacturing parts ON-OFF rocker switch ~35cm manufacturing parts Heat shrink tube 01 manufacturing parts end-cup with microcontroller base 01 manufacturing parts end-cup with for the ON-OFF switch and hold battery 02 manufacturing parts 3D printed bases for Capsense 02 manufacturing parts 3D printed bases for IMU 11 manufacturing parts M2 Mounting Screws 11 manufacturing parts M2 bolts 01 manufacturing parts foam sheet"},{"location":"designs/tstick-4gw/build-guide/#schematic","title":"Schematic:","text":"<p>This schematic is outdated. Use for FSR and Piezo Electronics reference only.</p>"},{"location":"designs/tstick-4gw/build-guide/#instructions","title":"Instructions:","text":""},{"location":"designs/tstick-4gw/build-guide/#building-the-frame","title":"Building the Frame:","text":"<p>Cut the PVC in half as in the picture and tape the conductive tape 1.5cm apart.\u00a0 Length of holes assembly is 1.5 * 15 for 16 strips. That is 22.5cm. You need aprox. 8 cm of copper tape per strip.</p> <p>Tip</p> <p>Before start assembling the T-Stick, pay attention to the position of the components. Plan yourself to place the components for them to not \"overlap\" each other (check image below). Also, make sure the cables are long enough to allow the tube and caps to be opened and closed properly.</p> <p></p> <p>The Capsense (https://www.cypress.com/le/127221/download) breakout boards use 2 3D printed bases. It connects via a jumper cable with SH1. connectors to the D32 Pro (https://wiki.wemos.cc/products:d32:d32_pro).</p> <p>Warning</p> <p>THE CAPSENSE BOARD HAS THE CONNECTORS LABELED FOR THE MICROCONTROLLER (IN) AND IMU (OUT). BE CAREFUL WHEN CONNECTING THEM BECAUSE OF A LAST MINUTE CHANGE IN THE PINOUT OF THE BOARD. SEE SCHEMATIC BELOW. </p> <p>The Capsense label for ground and +3V3 is inverted at the end that goes to the IMU. You should connect:</p> <p>Capsense -&gt; IMU GND ------&gt; +3V3 SDA ------&gt; SDA SCL ------&gt; SCL +3V3------&gt; GND</p> <p></p> <p>Please take extra care since it is necessary to cut the cable and solder the right ends at the IMU. </p> <p>Also, if you need to extend the length of the SH1.0 cable, always cut the wire in half and extend using both parts according to the color. Using two different wires can lead to mistakes since the SH1.0 cable is parallel. Failing to follow this step can end up burning your ESP32.</p> <p>All the building tools can be found in the Machine Shop at the McGill Music Tech Department.</p>"},{"location":"designs/tstick-4gw/build-guide/#imu","title":"IMU:","text":"<p>The LSM9DS1 IMU connects via another SH1.0 cable to the other socket on the Capsense for I2C communication. One end has the SH housing the other is open to solder onto the IMU breakout board. There are also 2 3D printed bases to attach the IMU to the frame.</p> <p></p> <p>The T-Stick Spatial orientation is dened as follows:</p> <p></p> <p>Please, install\u00a0the IMU so that this conguration is kept consistent will the design.</p>"},{"location":"designs/tstick-4gw/build-guide/#fsr-and-piezo-electronics","title":"FSR and Piezo Electronics:","text":"<p>The Force Sensitive Resistor and the Piezoelectric sensor are glued to the frame with epoxy, superglue, or hot glue. </p> <p></p> <p>The signal processing circuit is all analog and needs to be soldered to a perfboard. The piezoelectric circuit output is to be soldered to pin 32 of the ESP32 and the FSR circuit output to pin 33. Electronic building tools can be found in the Electronics Shop at the McGill Music Tech Department. Solder long cables to the FSR pins.</p> <p>Tip</p> <p>The FSR pins are very delicate. Put some heat shrink tube to reinforce the end of the fsr so it doesn\u2019t break. If it breaks, it\u2019s not repairable.</p> <p>Here\u2019s the pinout for the LM358 opamp you will be using in the above circuit:</p> <pre><code>                    +--()--+\n            Output A | 1   8| V+\n    Inverting Input A | 2   7| Output B\nNon-Inverting Input A | 3   6| Inverting Input B\n                GND | 4   5| Non-Inverting Input B\n                    +------+\n</code></pre> <p>OBS: Don't forget to connect GND and V+.</p>"},{"location":"designs/tstick-4gw/build-guide/#envelope-follower-circuit","title":"Envelope Follower Circuit","text":""},{"location":"designs/tstick-4gw/build-guide/#voltage-divider-circuit","title":"Voltage Divider Circuit","text":""},{"location":"designs/tstick-4gw/build-guide/#microcontroller","title":"Microcontroller:","text":"<p>The microcontroller to be used with the T-Stick is the Lolin D32 PRO. You can check the tech specs at\u00a0https://wiki.wemos.cc/products:d32:d32_pro.</p>"},{"location":"designs/tstick-4gw/build-guide/#firmware","title":"Firmware:","text":"<p>Instructions to upload (flash) the T-Stick firmware and configuration files can be found here.</p> <p>Read and follow ALL the instructions at before upload it to the board. There are some steps to prepare your machine and the ESP32 before flash it for the first time.</p> <p>It is recommended to use the board test firmwares located at https://github.com/IDMIL/TStick/tree/master/Sopranino/2GW/19X/Tests to test the capsense board and the IMU after install them.</p> <p>Nightly builds and beta firmwares can be downloaded at https://github.com/IDMIL/TStick. Before using them, contact the IDMIL's lab team.</p>"},{"location":"designs/tstick-4gw/build-guide/#more-info","title":"More info:","text":"<p>Version 1.1: Edu Meneses - eduardo.meneses@mail.mcgill.ca\\ Version 1.0: Created by: Alex Nieva - alex.nieva@mail.mcgill.ca</p>"},{"location":"designs/tstick-4gw/build-guide/#bill-of-materials_1","title":"Bill of Materials","text":"Qty Description 01 Trill 01 TinyPICO 01 IMU breakout board LSM9DS 01 FSR 408 01 1K resistor 01 10K potentiometer 01 button 01 Li-Po Battery min 1000mA 01 PVC Tube (30 cm) \\~85cm Copper adhesive tape 01 ON-OFF rocker switch \\~35cm Heat shrink tube 01 end-cup with microcontroller base 01 end-cup with for the ON-OFF switch 01 3D printed bases, one of each file, and 4 regular poles 11 M2 Mounting Screws 01 foam sheet"},{"location":"designs/tstick-4gw/build-guide/#instructions_1","title":"Instructions","text":""},{"location":"designs/tstick-4gw/build-guide/#printing-the-frame","title":"Printing the Frame","text":"<p>Print one of each of the 3d printing files, but print 4 copies of the \"regular poles\". The beds (pieces that snap together) will need supports on the piece that snaps.</p> <p></p> <p>Snap the beds together as in the image above, snapping the regular poles between beds to secure them. Place copper strips on each arc in the beds, these will be used for capacitive touch sensing.</p>"},{"location":"designs/tstick-4gw/build-guide/#soldering-components","title":"Soldering Components","text":"<p>All the building tools can be found in the Machine Shop at the McGill Music Tech Department.</p> <p></p> <p>Let's start with the end cap where the TinyPICO will be inserted. Insert the button into the slot like the pictures below.</p> button top view button bottom view soldering <p>Solder 2 wires diagonally to the button pins, connecting one to GND and one to pin 15 on the TinyPICO. For the GND connection, twist an extra wire together before soldering to the TinyPICO, which will be used for connecting the IMU later on.</p> connecting to TinyPICO completed button circuit <p>To prepare the resistor for its FSR connection, solder 2 wires to one end and 1 to the other like below. Use heat shrink to wrap the connection. Solder the single end wire to a GND pin on the button. Solder one of the double end wires to pin 33 on the TinyPICO.</p> soldering heat shrinking connecting to TinyPICO <p>Prepare the FSR connections by carefully soldering 2 wires to its terminals, using the extra wire form the resistor as one of the terminals. Be cautious not to melt the plastic on the FSR if possible by soldering quickly. Heat shrink the terminals when complete.</p> soldering heat shrinking <p>Solder the other FSR wire and another wire (which will connect to the IMU) to the 3V3 pin on the TinyPICO (yellow and orange in the picture below). Twisting the 2 wires together before inserting into the pin will make this task easier.</p> twisting and soldering view of 3V3 pin <p>Solder 2 wires to each of the IMU's GND, VCC, SDA and SCL pins. One of the VCC wires and one of the GND wires should be the extra 3V3 and GND wires from the TinyPICO that you put in in the above steps. Connect one of the SDA wires to pin 21 of the TinyPICO, and one of the SCL wires to pin 22 of the TinyPICO.</p> twisting and soldering connecting to TinyPICO imu wiring <p>At this stage, the IMU should have unconnected wires (1 of each) from SDA, SCL, GND and VCC. Run the 4 unconnected wires through the pole and solder to the corresponding labeled pins on the Trill.</p> trill connections alternate view <p>Now for the fun part ;). Solder wires onto each of the 15 copper strips, running them through the poles to the Trill board when necessary. When cutting wires for this part, allow enough length to get to the Trill, but not too long to clutter the internals. Solder the other ends of the wires in order from pico towards the end cap to pins 0-15 on the Trill board.</p> copper soldering alternate view <p>Connect long wires from the 5V and GND pins of the TinyPICO (for the battery), and run them through the poles to the other end. Mount the IMU and Trill boards to their beds, and insert the TinyPICO into its slot in the end cap with the button. Slide the entire frame with the button cap into the PVC, making sure the long power wires can be accessed from the open end. Attach the FSR to the outside of the PVC, cutting the end if it's too long. Use the end cap's slot for the FSR wires to come out of the frame.</p> <p>IMU Mounting Note: Please install\u00a0the IMU so that this configuration is kept consistent will the design. </p> <p></p> <p> </p> <p>Insert the power switch into the other end cap. Solder the power wire of the battery to the power switch as in the picture below, twisting together the long power wire from the TinyPICO sticking out the end. Solder the long GND wire to the battery's GND.</p> <p>Important Note: 2nd picture below should have ran the wires through the poles and inserted into the frame before soldering to the TinyPICO, be sure to do this before soldering the battery to the TinyPICO.</p> power soldering power circuit view <p>Hooray, you built a T-Stick!</p>"},{"location":"designs/tstick-4gw/build-guide/#document-info","title":"Document info","text":"<ul> <li>Version 1.2: Brady Boettcher</li> <li>Version 1.1: Edu Meneses - eduardo.meneses@mail.mcgill.ca</li> <li>Version 1.0: Alex Nieva - alex.nieva@mail.mcgill.ca</li> </ul>"},{"location":"designs/tstick-4gw/connection-guide/","title":"Connecting to a T-Stick 4GW/5GW","text":""},{"location":"designs/tstick-4gw/connection-guide/#option-1-wireless-connection","title":"Option 1: Wireless Connection","text":""},{"location":"designs/tstick-4gw/connection-guide/#get-your-network-details","title":"Get your network details","text":"<ol> <li>Connect to the network you will be connecting the T-Stick to.</li> <li>Note the SSID (network name) and SSID Password (network password).</li> <li>Get your computers IP address while connected to this network. Below are linked some support articles for Windows, MacOS and Linux on how to find your computers IP address.</li> <li>Find your IP Address Windows</li> <li>Find your IP Address MacOS</li> <li>Find your IP Address Linux</li> </ol>"},{"location":"designs/tstick-4gw/connection-guide/#connect-to-the-t-stick","title":"Connect to the T-Stick","text":"<ol> <li>Power on your T-Stick and wait until the boot sequence is complete. If your T-Stick does not have a Power switch press the button once and wait for the T-Stick to turn on.</li> <li>Connect to the T-Stick_XXX wifi network where XXX is the ID of the T-Stick. ie: TStick_001. By default the password is mappings.</li> <li>Open your browser and go to http://TStick_XXX.local/ or http://192.168.4.1, where XXX is the ID of the T-Stick module.       </li> <li>In the Network section write the network name and password optained in Step 2 in the SSID and SSID Password fields.</li> <li>In the OSC send settings put in your computer's IP address optained in Step 3 in the Primary IP field.</li> <li>Click the green Save button. You will be directed to a page saying that the information was saved successfully.</li> <li>Click Config on the top of the page to return to the orginal menu.</li> <li>Click the green Close and Reboot button at the bottom of the page.</li> </ol>"},{"location":"designs/tstick-4gw/flashing-guide/","title":"Flashing Firmware for T-Stick 4GW","text":""},{"location":"designs/tstick-4gw/flashing-guide/#option-1-using-bin-files-and-esptoolpy-deprecated","title":"Option 1: using .bin files and esptool.py [DEPRECATED]","text":"<p>This method is easier/faster. It uses esptool.py.</p>"},{"location":"designs/tstick-4gw/flashing-guide/#download-the-bin-files","title":"Download the bin files","text":"<ul> <li>Download the .bin files located at the bin folder</li> </ul>"},{"location":"designs/tstick-4gw/flashing-guide/#download-esptoolpy","title":"Download esptool.py","text":"<ul> <li>Download the esptool.py from https://github.com/espressif/esptool. Use the <code>Download ZIP</code> option from Github</li> <li>Unzip the esptool-master.zip file</li> </ul>"},{"location":"designs/tstick-4gw/flashing-guide/#connect-the-t-stick-to-the-computer-and-check-the-usb-port","title":"Connect the T-Stick to the computer and check the USB port","text":"<ul> <li>Check the T-Stick (ESP32) port in your computer:</li> <li>For MacOS/Linux:<ul> <li>install the latest drivers from from the SiLabs website.</li> <li>Open a Terminal window</li> <li>Execute the command <code>ls /dev/cu.*</code>. The command will return a list of ports in your computer.</li> <li>Plug the T-Stick (USB) and run the command <code>ls /dev/cu.*</code> one more time. You can now compare the lists and anotate the T-Stick USB port. Should be something similar to <code>/dev/cu.wchusbserial1410</code>, probably with a different number</li> <li>Linux users should also give the currently logged user read and write access the serial port over USB. Check here for more information</li> </ul> </li> <li>For Windows:<ul> <li>Check the list of identified COM ports in the Windows Device Manager</li> <li>Plug the T-Stick (USB) and check the list of identified COM ports in the Windows Device Manager again. The T-Stick port should appear on the list. Anotate the T-Stick USB port, it should be something similar to <code>COM3</code> or <code>COM16</code></li> </ul> </li> </ul>"},{"location":"designs/tstick-4gw/flashing-guide/#flash-the-firmware-bin-files","title":"Flash the firmware (.bin files)","text":"<ul> <li>Use Finder, Terminal, or File Explorer to copy the contents of the bin folder (you should copy 3 .bin files) to the esptool-master folder</li> <li>Navigate to the esptool-master folder in Terminal or Command Prompt</li> <li>Run the command (don't forget to replace the --port (/dev/cu.wchusbserial1410) option for your T-Stick port): <code>esptool.py --chip esp32 --port /dev/cu.wchusbserial1410 --baud 115200 --before default_reset --after hard_reset write_flash -z --flash_mode dio --flash_freq 80m --flash_size detect 0xe000 boot_app0.bin 0x1000 bootloader_dio_80m.bin 0x10000 esp32_arduino_FW211124.bin 0x8000 esp32_arduino_FW211124.ino.partitions.bin 2686976 esp32_arduino_FW211124.spiffs.bin</code>. Wait for the process to be complete. Do not unplug or turn off your T-Stick during the process.</li> </ul> <p>To set the T-Stick info and test if the data is being send correctly:</p> <ul> <li>Connect the T-Stick to a network (instructions here);</li> <li>Open the Pure Data (PD) or Max/MSP patch to receive T-Stick messages (they can be found here);</li> <li>Start receive OSC messages according to the chosen patch.</li> </ul>"},{"location":"designs/tstick-4gw/flashing-guide/#option-2-using-platformio-recommended","title":"Option 2: Using PlatformIO [RECOMMENDED]","text":"<p>INSTALL ALL DEPENDENCIES AND REAL ALL OBSERVATIONS BEFORE UPLOAD !</p> <p>You can use Visual Studio Code and the PlatformIO extension in order to flash firmware for the T-Stick-5GW.</p>"},{"location":"designs/tstick-4gw/flashing-guide/#setup-vs-code-and-platformio","title":"Setup VS Code and PlatformIO","text":"<ol> <li>Download Visual Studio Code.</li> <li>Follow the installation guide on PlatformIO's website to setup PlatformIO extension in VS Code</li> </ol> <p>Tip</p> <p>If you are not familiar with PlatformIO or VS Code it is recommended to read a quick start guide for both platforms before continuing this guide.</p>"},{"location":"designs/tstick-4gw/flashing-guide/#build-the-firmware","title":"Build the Firmware","text":"<ol> <li>Download and unzip the latest firmware from the T-Stick reposity</li> <li>In Visual Studio, under the File menu select open folder.   </li> <li>Navigate to where you downloaded the T-Stick repository and select the firmware folder.</li> <li>On the bottom bar select the correct environment depending on your T-Stick version (ie: <code>tinypico</code> or <code>lolin_d32_pro</code>)</li> <li>In the <code>main.cpp</code> file ensure the <code>TSTICK_SIZE</code> is the correct value for your T-Stick.</li> <li>Navigate to the data folder and open <code>config.json</code>.</li> <li>Update the <code>id</code> of the T-Stick to a number of your choosing.</li> <li> <p>Update the <code>author</code> to your name.</p> </li> <li> <p>Build the firmware by clicking the checkmark on the bottom menu.</p> </li> <li> <p>Click the PlatformIO Icon to show the Project Tasks.</p> </li> <li> <p>Select <code>Build Filesystem Image</code>.</p> </li> </ol> <p></p>"},{"location":"designs/tstick-4gw/flashing-guide/#upload-the-firmware-and-filesystem-image","title":"Upload the Firmware and Filesystem Image","text":"<p>Note</p> <p>If your T-Stick was in deep sleep prior to flashing, you may have to wake up the instrument by pressing the button for it to show up on your computer.</p> <ol> <li> <p>Plug in your T-Stick to a USB Port on your computer.</p> </li> <li> <p>In the PlatformIO Project Tasks select <code>Upload Filesystem Image</code>.</p> </li> <li> <p>Once the filesystem is uploaded. Select <code>Upload</code> to flash the firmware to the board.</p> </li> </ol> <p>Warning</p> <p>DO NOT DISCONNECT the USB cable while the T-Stick is flashing.</p> <p>After flashing, you can use the VSC/PlatformIO serial monitor to check if the T-Stick is booting properly. You should see T-Stick booting process.</p> <p>You can also interact with the controller using the following commands:</p> <ul> <li><code>ping</code> to get the T-Stick to reply pong</li> <li><code>reboot</code> to reboot</li> <li><code>sleep</code> to enter deep sleep</li> </ul>"},{"location":"designs/tstick-4gw/flashing-guide/#firmware-information","title":"Firmware Information","text":"<p>Sopranino T-Stick 4G - LOLIN D32 PRO / TinyPico - USB - WiFi Input Devices and Music Interaction Laboratory (IDMIL)</p>"},{"location":"designs/tstick-4gw/specs_4gw_2018/","title":"T-Stick 4GW-2018","text":"<p>Warning</p> <p>The T-Stick 4GW-2018 is not recommended for new builds due to touch sensor IC and the LSM9DS1 IMU no longer being produced.</p> <p>The T-Stick 4GW was designed by Eduardo Meneses and Alex Nieva with the first revision being completed in 2018. This generation of T-Sticks is a Wi-Fi based system using Open Sound Control and later Libmapper for sending signals. It uses the ESP32 microcontroller for controlling the T-Stick. Multiple development boards such as the Lolin D32 and TinyPico have been used with this design. Although the design is modular and can in theory support T-Sticks up to the length of a Tenor T-Stick. Limitations due to how the T-Stick is constructed and firmware makes this design appropriate only for Sopranino and Soprano T-Sticks.</p>"},{"location":"designs/tstick-4gw/specs_4gw_2018/#specifications","title":"Specifications","text":"Feature Details Status Not recommended for new builds Release Year 2018 Communication Type Wi-Fi 4, 802.11 b/g/n Compatible protocols Open Sound Control (OSC)/Libmapper Touch Sensing Density 1 channel per 2cm Microcontroller ESP32 Series Gestures Embedded? Yes Embedded Gestures Libraries Puara Gestures Sensors LSM9DS1 IMU, IDMIL Capsence board (16 channels), Force Sensitive Resistor 408 Series, Piezoelectric sensor"},{"location":"designs/tstick-4gw/specs_4gw_2018/#osc-signal-namespace","title":"OSC Signal Namespace","text":"<p>Note</p> <p>Replace XXX for the T-Stick ID number</p>"},{"location":"designs/tstick-4gw/specs_4gw_2018/#raw-data","title":"Raw data","text":"Signal Name Type Range Description /TStick_XXX/raw/capsense i... 0 or 1 Raw signal from the touch sensor. Outputs 1 if a finger is detected /TStick_XXX/raw/fsr i 0  4095 Raw signal from the force sensitive resistor /TStick_XXX/raw/accl fff  24 Raw signal from the accelerometer in 3-axis (x,y,z) /TStick_XXX/raw/gyro fff  42 Raw signal from the gyroscope in 3-axis (x,y,z) /TStick_XXX/raw/magn fff  0.001 Raw signal from the magnetometer in 3-axis (x,y,z) /TStick_XXX/battery i 0  100 Battery percentage (linear estimate based on voltage)"},{"location":"designs/tstick-4gw/specs_4gw_2018/#button-signals","title":"Button Signals","text":"Signal Name Type Range Description /TStick_XXX/instrument/button/count i 0  x Number of times the button was tapped /TStick_XXX/instrument/button/tap i 0 or 1 Outputs 1 if the button was tapped /TStick_XXX/instrument/button/dtap i 0 or 1 Outputs 1 if the button was double tapped /TStick_XXX/instrument/button/ttap i 0 or 1 Outputs 1 if the button was triple tapped"},{"location":"designs/tstick-4gw/specs_4gw_2018/#touch-gestures","title":"Touch Gestures","text":"Signal Name Type Range Description /TStick_XXX/instrument/squeeze f 0  1 Normalised signal from the force sensitive resistor /TStick_XXX/instrument/touch/all f 0  1 /TStick_XXX/instrument/touch/top f 0  1 /TStick_XXX/instrument/touch/middle f 0  1 /TStick_XXX/instrument/touch/bottom f 0  1 /TStick_XXX/instrument/brush f 0  x cm/s /TStick_XXX/instrument/multibrush ffff 0  x cm/s /TStick_XXX/instrument/rub f 0  x cm/s /TStick_XXX/instrument/multirub ffff 0  x cm/s"},{"location":"designs/tstick-4gw/specs_4gw_2018/#inertial-gestures-signals","title":"Inertial Gestures Signals","text":"Signal Name Type Range Description /TStick_XXX/orientation ffff N/A Quaternions for T-Stick orientation /TStick_XXX/instrument/ypr fff  180\\(^{\\circ}\\)  90\\(^{\\circ}\\)  180\\(^{\\circ}\\) Yaw, pitch, roll of T-Stick /TStick_XXX/instrument/shakexyz fff 0  x Shake intensity in 3-axis (x,y,z) /TStick_XXX/instrument/jabxyz fff 0  x Jab intensity in 3-axis (x,y,z)"},{"location":"designs/tstick-4gw/specs_4gw_2021/","title":"T-Stick 4GW-2021","text":"<p>Warning</p> <p>The T-Stick 4GW-2021 is not recommended for new builds due to Tinypico and the LSM9DS1 IMU no longer being produced.</p> <p>The T-Stick 4GW-2021 was designed by Eduardo Meneses in September of 2021. It uses the same signal namespace as the T-Stick 4GW-2018 but replaces the IDMIL capsence board with Bela's Trill Craft Touch Board.</p>"},{"location":"designs/tstick-4gw/specs_4gw_2021/#specifications","title":"Specifications","text":"Feature Details Status Not recommended for new builds Release Year 2021 Communication Type Wi-Fi 4, 802.11 b/g/n Compatible protocols Open Sound Control (OSC)/Libmapper Touch Sensing Density 1 channel per 2cm Microcontroller ESP32 Series Gestures Embedded? Yes Embedded Gestures Libraries Puara Gestures Sensors LSM9DS1 IMU, Trill Craft Capacitive Sensing Board (30 channels), Force Sensitive Resistor 408 Series"},{"location":"designs/tstick-4gw/specs_4gw_2021/#osc-signal-namespace","title":"OSC Signal Namespace","text":"<p>Note</p> <p>Replace XXX for the T-Stick ID number</p>"},{"location":"designs/tstick-4gw/specs_4gw_2021/#raw-data","title":"Raw data","text":"Signal Name Type Range Description /TStick_XXX/raw/capsense i... 0 or 1 Raw signal from the touch sensor. Outputs 1 if a finger is detected /TStick_XXX/raw/fsr i 0  4095 Raw signal from the force sensitive resistor /TStick_XXX/raw/accl fff  24 Raw signal from the accelerometer in 3-axis (x,y,z) /TStick_XXX/raw/gyro fff  42 Raw signal from the gyroscope in 3-axis (x,y,z) /TStick_XXX/raw/magn fff  0.001 Raw signal from the magnetometer in 3-axis (x,y,z) /TStick_XXX/battery i 0  100 Battery percentage (linear estimate based on voltage)"},{"location":"designs/tstick-4gw/specs_4gw_2021/#button-signals","title":"Button Signals","text":"Signal Name Type Range Description /TStick_XXX/instrument/button/count i 0  x Number of times the button was tapped /TStick_XXX/instrument/button/tap i 0 or 1 Outputs 1 if the button was tapped /TStick_XXX/instrument/button/dtap i 0 or 1 Outputs 1 if the button was double tapped /TStick_XXX/instrument/button/ttap i 0 or 1 Outputs 1 if the button was triple tapped"},{"location":"designs/tstick-4gw/specs_4gw_2021/#touch-gestures","title":"Touch Gestures","text":"Signal Name Type Range Description /TStick_XXX/instrument/squeeze f 0  1 Normalised signal from the force sensitive resistor /TStick_XXX/instrument/touch/all f 0  1 /TStick_XXX/instrument/touch/top f 0  1 /TStick_XXX/instrument/touch/middle f 0  1 /TStick_XXX/instrument/touch/bottom f 0  1 /TStick_XXX/instrument/brush f 0  x cm/s /TStick_XXX/instrument/multibrush ffff 0  x cm/s /TStick_XXX/instrument/rub f 0  x cm/s /TStick_XXX/instrument/multirub ffff 0  x cm/s"},{"location":"designs/tstick-4gw/specs_4gw_2021/#inertial-gestures-signals","title":"Inertial Gestures Signals","text":"Signal Name Type Range Description /TStick_XXX/orientation ffff N/A Quaternions for T-Stick orientation /TStick_XXX/instrument/ypr fff  180\\(^{\\circ}\\)  90\\(^{\\circ}\\)  180\\(^{\\circ}\\) Yaw, pitch, roll of T-Stick /TStick_XXX/instrument/shakexyz fff 0  x Shake intensity in 3-axis (x,y,z) /TStick_XXX/instrument/jabxyz fff 0  x Jab intensity in 3-axis (x,y,z)"},{"location":"designs/tstick-5gw/","title":"General Information","text":"<p>The T-Stick 5GW consists of a custom ESP32 board which integrates a ESP32-S3 WROOM 2 Module with a ICM20948 IMU and MAX17055 on a single board, and a touch board that has a pinout for the Trill Craft board as well as, two JST-SH 4 pin connectors to daisy chain multiple touch boards together.</p>"},{"location":"designs/tstick-5gw/#guides","title":"Guides","text":"<p>For information on how to use the T-Stick 5GW check out the guides below:</p> <ul> <li> Build Guide</li> <li> Flashing Guide</li> <li> Connection Guide</li> </ul>"},{"location":"designs/tstick-5gw/#5th-generation-t-sticks","title":"5th Generation T-Sticks","text":"<p>Click each box to get more information on each variant of the T-Stick 5GW</p> <ul> <li> <p>T-Stick 5GW-Trill </p> <p>An ESP32-S3 based T-Stick using the Bela Trill Touch Board.</p> <p> More Details</p> </li> <li> <p>T-Stick 5GW-Enchanti </p> <p>An ESP32-S3 based T-Stick using a custom touch board.</p> <p> More Details</p> </li> </ul>"},{"location":"designs/tstick-5gw/#diagrams","title":"Diagrams","text":""},{"location":"designs/tstick-5gw/#schematic","title":"Schematic","text":""},{"location":"designs/tstick-5gw/build-guide/","title":"Building a T-Stick 5GW","text":"<p>Warning</p> <p>This guide is still under constructions. Links to files/products may be broken. If you find a broken link please open an issue on github.</p> 5GW-Trill5GW-Enchanti <p>Note</p> <p>This guide is for building a Soprano T-Stick 5GW.</p>"},{"location":"designs/tstick-5gw/build-guide/#bill-of-materials","title":"Bill of Materials","text":"Qty Description 01 Trill Craft Board 01 EnchantiS3 Board 01 Trill Extension Board 01 Flex PCB touch sensor 01 30cm FSR 408 01 6mm Button 01 Li-Po/Li-ion Battery min 1000mA 01 ABS/PVC Tube 02 Sparkfun Qwiic Cable or equivalent (at least 10cm) (longer T-Sticks need additional cables) 02 JST-SH 2 pin cable \\~35cm Heat shrink tube 01 end-cup with microcontroller base 01 end-cup with for the ON-OFF switch 01 3D printed bases, one of each file, and 4 regular poles 11 M3 Mounting Screws 01 foam sheet"},{"location":"designs/tstick-5gw/build-guide/#instructions","title":"Instructions","text":""},{"location":"designs/tstick-5gw/build-guide/#prepare-the-3d-printed-components","title":"Prepare the 3D printed components","text":"<p>Print the following files from the T-Stick repository.</p> <ul> <li>x1 esp32-endcap</li> <li>x1 esp32-capcloser</li> <li>x1 touch-board-bed</li> <li>x2 touch-board-door</li> <li>x1 blank-endcap</li> </ul> <p>Note</p> <p>If you are using an 18650 battery you will need to print <code>liion-endcap</code> and <code>liion-capcloser</code> instead of the <code>blank-endcap</code>.</p> <p></p>"},{"location":"designs/tstick-5gw/build-guide/#adding-inserts","title":"Adding inserts","text":"<p>Use a soldering iron or other heat source to add M2 inserts to the front of the ESP32 bed piece (x2).</p> <p></p> <p>Add M3 inserts to the holes inside the ESP32 bed (x2). These will be used to screw in the board to the component.</p> <p></p> <p>Add M2 inserts to the holes on the side of the touch board beds (x4). These will be used to screw in the touch board doors.</p> <p></p>"},{"location":"designs/tstick-5gw/build-guide/#prepare-the-abspvc-pipe","title":"Prepare the ABS/PVC Pipe","text":"<p>Cut the ABS/PVC pipe two pieces. One piece should be about ~8inch/20cm and other a short piece about ~1.2inch/3cm. Use super glue or other alternative methods to glue the touch board bed to both pieces of the ABS/PVC pipe. Make sure to glue the short piece to the end closest to the M3 inserts.</p> <p></p> <p>Tip</p> <p>We recommend using a drop saw/mitre saw to get a clean cut</p> <p>Add M3 inserts to the last two holes closest to the short PVC pipe on the bottom of the touch board beds (x2). These will be used to secure the Trill Craft board.</p> <p></p> <p>Tip</p> <p>Add the M3 inserts from the top (from the flat part of the piece). This will ensure that you don't get fillament in the way when attempting to screw in the boards.</p>"},{"location":"designs/tstick-5gw/build-guide/#setup-the-touch-board","title":"Setup the touch board","text":"<p>Solder the Trill Craft board on the Trill Craft Extension Board.</p> <p></p> <p>Use two M3 screws to screw the Trill Craft extension board to the touch board bed. Connect the touch sensor to the FFC connectors on the Trill Craft board. Peel the cover from the tape and tape the touch sensor against the pipe as shown below.</p> <p></p>"},{"location":"designs/tstick-5gw/build-guide/#mount-the-fsr","title":"Mount the FSR","text":"<p>Cut the 2-pin JST cable to about 10cm as shown in the image below.</p> <p></p> <p>Solder the two ends of the JST cable to the two terminals of the FSR.</p> <p>Warning</p> <p>Take care with soldering the FSR. Excessive heat will damage the FSR pins.</p> <p></p> <p>Tip</p> <p>The FSR pins are very delicate. Put some heat shrink tube to reinforce the end of the fsr so it doesn\u2019t break. If it breaks, it\u2019s not repairable.</p> <p>Tip</p> <p>It is recommended to put a bit of solder on both the FSR terminals and the ends of the FSR cables. This allows you to quickly solder the FSR, without damaging the terminals due to excessive heat. Use heat shrink to prevent shorts.</p> <p>Attach the FSR to the outside of the ABS/PVC pipe on the opposite end of the touch sensor, cutting the end if it's too long. Cut the foam sheets into rectangles and tape it over the FSR.</p> FSR mounted, before adding foam sheet FSR mounted with foam sheet"},{"location":"designs/tstick-5gw/build-guide/#apply-heat-shrink","title":"Apply Heat Shrink","text":"<p>Cut the Heat shrink leaving a little heat shrink at both ends of the pipe. Shrink the heat shrink over the pipe, making sure to not overtighten the heat shrink over the FSR side of the pipe. Once the heat shrink has been applied. Cut a hole in the heat shrink where the touch board is.</p> <p>Warning</p> <p>Be careful to not cut the touch sensor</p> <p></p>"},{"location":"designs/tstick-5gw/build-guide/#prepare-the-enchantis3-board","title":"Prepare the EnchantiS3 Board","text":"<p>Use two M3 screws to secure the EnchantiS3 board to the ESP32 endcap. Glue the button in the button slot on the ESP32 bed piece. Cut another 2-Pin JST cable (like the one used for the FSR). Solder the two ends of the JST cable vertically to the button pins. </p> <p></p> <p>Connect the JST cable from the button to the BTN header on the EnchantiS3 board.</p> <p></p>"},{"location":"designs/tstick-5gw/build-guide/#final-assembly","title":"Final Assembly","text":"<p>Glue both endcaps to the ends of the pipe. Connect the JST cable from the FSR to the FSR header on the EnchantiS3 board.</p> <p>Info</p> <p>It is really important that there is a strong adhesion when gluing the components together. Use glue designed for the plastic pipe you are using.</p> <p></p> <p>Use M2 screws add the touch door beds to the T-Stick.</p> <p></p> <p>Congratulations you've built your T-Stick!</p>"},{"location":"designs/tstick-5gw/build-guide/#bill-of-materials_1","title":"Bill of Materials","text":"Qty Description 01 EnchantiTouch Board 01 EnchantiS3 Board 01 Flex PCB touch sensor 01 60cm FSR 408 01 6mm Button 01 Li-Po/Li-ion Battery min 1000mA 01 ABS/PVC Tube 02 Sparkfun Qwiic Cable or equivalent (at least 10cm) (longer T-Sticks need additional cables) 02 JST-SH 2 pin cable \\~65cm Heat shrink tube (80mm diameter) 01 end-cup with microcontroller base 01 end-cup with for the ON-OFF switch 01 3D printed bases, one of each file, and 4 regular poles 11 M3 Mounting Screws 04 M3 Inserts (6mm) 06 M2 Inserts (6mm) 01 foam sheet 01 Plastic glue 01 18650 battery holder (if using 18650 battery) 01 2 pin JST-PH cable (if using 18650 battery)"},{"location":"designs/tstick-5gw/build-guide/#instructions_1","title":"Instructions","text":""},{"location":"designs/tstick-5gw/build-guide/#prepare-the-3d-printed-components_1","title":"Prepare the 3D printed components","text":"<p>Print the following files from the T-Stick repository.</p> <ul> <li>x1 esp32-endcap</li> <li>x1 esp32-capcloser</li> <li>x1 touch-board-bed</li> <li>x2 touch-board-door</li> <li>x1 blank-endcap</li> </ul> <p>Note</p> <p>If you are using an 18650 battery you will need to print <code>liion-endcap</code> and <code>liion-capcloser</code> instead of the <code>blank-endcap</code>.</p> <p></p>"},{"location":"designs/tstick-5gw/build-guide/#adding-inserts_1","title":"Adding inserts","text":"<p>Use a soldering iron or other heat source to add M2 inserts to the front of the ESP32 bed piece (x2).</p> <p></p> <p>Add M3 inserts to the holes inside the ESP32 bed (x2). These will be used to screw in the board to the component.</p> <p></p> <p>Add M2 inserts to the holes on the side of the touch board beds (x4). These will be used to screw in the touch board doors.</p> <p></p> <p>Add M3 inserts to the 3rd and 5th hole on the bottom of the touch board beds (x2). These will be used to secure the Enchanti touch board.</p> <p>Tip</p> <p>Add the M3 inserts from the top (from the flat part of the piece). This will ensure that you don't get fillament in the way when attempting to screw in the boards.</p>"},{"location":"designs/tstick-5gw/build-guide/#prepare-the-abspvc-pipe_1","title":"Prepare the ABS/PVC Pipe","text":"<p>Cut the ABS/PVC pipe into two pieces. Each with a length of about ~10inch/25cm. Use super glue or other alternative methods to glue the touch board bed to both pieces of the ABS/PVC pipe.</p> <p></p> <p>Tip</p> <p>We recommend using a drop saw/mitre saw to get a clean cut</p>"},{"location":"designs/tstick-5gw/build-guide/#setup-the-touch-board_1","title":"Setup the touch board","text":"<p>Flash the Enchanti Touch board using the firmware found here. You can find instructions for how to flash the PSoC 4100S Max on Infineon's website</p> <p>Use two M3 screws to screw the Enchanti Touch board to the touch board bed. Connect the touch sensor to the FFC connectors on the Enchanti Touch board. Peel the cover from the tape and tape the touch sensor against the pipe as shown below.</p> <p></p>"},{"location":"designs/tstick-5gw/build-guide/#mount-the-fsr_1","title":"Mount the FSR","text":"<p>Cut the 2-pin JST cable to about 10cm as shown in the image below.</p> <p></p> <p>Solder the two ends of the JST cable to the two terminals of the FSR.</p> <p>Warning</p> <p>Take care with soldering the FSR. Excessive heat will damage the FSR pins.</p> <p></p> <p>Tip</p> <p>The FSR pins are very delicate. Put some heat shrink tube to reinforce the end of the fsr so it doesn\u2019t break. If it breaks, it\u2019s not repairable.</p> <p>Tip</p> <p>It is recommended to put a bit of solder on both the FSR terminals and the ends of the FSR cables. This allows you to quickly solder the FSR, without damaging the terminals due to excessive heat. Use heat shrink to prevent shorts.</p> <p>Attach the FSR to the outside of the ABS/PVC pipe on the opposite end of the touch sensor, cutting the end if it's too long. Cut the foam sheets into rectangles and tape it over the FSR.</p> FSR mounted, before adding foam sheet FSR mounted with foam sheet"},{"location":"designs/tstick-5gw/build-guide/#apply-heat-shrink_1","title":"Apply Heat Shrink","text":"<p>Cut the Heat shrink leaving a little heat shrink at both ends of the pipe. Shrink the heat shrink over the pipe, making sure to not overtighten the heat shrink over the FSR side of the pipe. Once the heat shrink has been applied. Cut a hole in the heat shrink where the touch board is.</p> <p>Warning</p> <p>Be careful to not cut the touch sensor</p> <p></p>"},{"location":"designs/tstick-5gw/build-guide/#prepare-the-enchantis3-board_1","title":"Prepare the EnchantiS3 Board","text":"<p>Use two M3 screws to secure the EnchantiS3 board to the ESP32 endcap. Glue the button in the button slot on the ESP32 bed piece. Cut another 2-Pin JST cable (like the one used for the FSR). Solder the two ends of the JST cable vertically to the button pins. Connect the JST cable from the button to the BTN header on the EnchantiS3 board.</p> <p></p>"},{"location":"designs/tstick-5gw/build-guide/#final-assembly_1","title":"Final Assembly","text":"<p>Glue both endcaps to the ends of the pipe. Connect the JST cable from the FSR to the FSR header on the EnchantiS3 board.</p> <p>Info</p> <p>It is really important that there is a strong adhesion when gluing the components together. Use glue designed for the plastic pipe you are using.</p> <p></p> <p>Use M2 screws add the touch door beds to the T-Stick.</p> <p></p>"},{"location":"designs/tstick-5gw/build-guide/#next-steps","title":"Next Steps","text":"<p>Congratulations you have built a T-Stick 5GW! Instructions to upload (flash) the T-Stick firmware and configuration files can be found here.</p> <p>Read and follow ALL the instructions before uploading the firmware to the board. There are some steps to prepare your machine and the ESP32 before flash it for the first time.</p>"},{"location":"designs/tstick-5gw/build-guide/#more-info","title":"More info:","text":"<p>Version 0.0: Created by: Albert-Ngabo Niyonsenga - aniyonsenga@gmail.com</p>"},{"location":"designs/tstick-5gw/connection-guide/","title":"Connecting to a T-Stick 4GW/5GW","text":""},{"location":"designs/tstick-5gw/connection-guide/#option-1-wireless-connection","title":"Option 1: Wireless Connection","text":""},{"location":"designs/tstick-5gw/connection-guide/#get-your-network-details","title":"Get your network details","text":"<ol> <li>Connect to the network you will be connecting the T-Stick to.</li> <li>Note the SSID (network name) and SSID Password (network password).</li> <li>Get your computers IP address while connected to this network. Below are linked some support articles for Windows, MacOS and Linux on how to find your computers IP address.</li> <li>Find your IP Address Windows</li> <li>Find your IP Address MacOS</li> <li>Find your IP Address Linux</li> </ol>"},{"location":"designs/tstick-5gw/connection-guide/#connect-to-the-t-stick","title":"Connect to the T-Stick","text":"<ol> <li>Power on your T-Stick and wait until the boot sequence is complete. If your T-Stick does not have a Power switch press the button once and wait for the T-Stick to turn on.</li> <li>Connect to the T-Stick_XXX wifi network where XXX is the ID of the T-Stick. ie: TStick_001. By default the password is mappings.</li> <li>Open your browser and go to http://TStick_XXX.local/ or http://192.168.4.1, where XXX is the ID of the T-Stick module.       </li> <li>In the Network section write the network name and password optained in Step 2 in the SSID and SSID Password fields.</li> <li>In the OSC send settings put in your computer's IP address optained in Step 3 in the Primary IP field.</li> <li>Click the green Save button. You will be directed to a page saying that the information was saved successfully.</li> <li>Click Config on the top of the page to return to the orginal menu.</li> <li>Click the green Close and Reboot button at the bottom of the page.</li> </ol>"},{"location":"designs/tstick-5gw/flashing-guide/","title":"Flashing Firmware for a T-Stick 5GW","text":"<p>Warning</p> <p>This guide is written for the preview firmware for the T-Stick 5GW located at https://github.com/aburt2/T-Stick/tree/5gw-main.</p>"},{"location":"designs/tstick-5gw/flashing-guide/#option-1-using-visual-studio-code-and-platformio","title":"Option 1: Using Visual Studio Code and PlatformIO","text":"<p>You can use Visual Studio Code and the PlatformIO extension in order to flash firmware for the T-Stick-5GW.</p>"},{"location":"designs/tstick-5gw/flashing-guide/#setup-vs-code-and-platformio","title":"Setup VS Code and PlatformIO","text":"<ol> <li>Download Visual Studio Code.</li> <li>Follow the installation guide on PlatformIO's website to setup PlatformIO extension in VS Code</li> </ol> <p>Tip</p> <p>If you are not familiar with PlatformIO or VS Code it is recommended to read a quick start guide for both platforms before continuing this guide.</p>"},{"location":"designs/tstick-5gw/flashing-guide/#build-the-firmware","title":"Build the Firmware","text":"<ol> <li>Download and unzip the latest firmware from the T-Stick reposity</li> <li>In Visual Studio, under the File menu select open folder.   </li> <li>Navigate to where you downloaded the T-Stick repository and select the firmware folder.</li> <li>On the bottom bar select the correct environment depending on your T-Stick version (ie: <code>tstick5gw_enchanti</code> or <code>tstick5gw_trill</code>)</li> <li>In the build flags ensure the <code>-DTSTICK_SIZE</code> is the correct value for your T-Stick.</li> <li>Navigate to the data folder and open <code>config.json</code>.</li> <li>Update the <code>id</code> of the T-Stick to a number of your choosing.</li> <li> <p>Update the <code>author</code> to your name.</p> </li> <li> <p>Build the firmware by clicking the checkmark on the bottom menu.</p> </li> <li> <p>Click the PlatformIO Icon to show the Project Tasks.</p> </li> <li> <p>Select <code>Build Filesystem Image</code>.</p> </li> </ol> <p></p>"},{"location":"designs/tstick-5gw/flashing-guide/#upload-the-firmware-and-filesystem-image","title":"Upload the Firmware and Filesystem Image","text":"<p>Note</p> <p>If your T-Stick was in deep sleep prior to flashing, you may have to wake up the instrument by pressing the button for it to show up on your computer.</p> <ol> <li> <p>Plug in your T-Stick to a USB Port on your computer.</p> </li> <li> <p>In the PlatformIO Project Tasks select <code>Upload Filesystem Image</code>.</p> </li> <li> <p>Once the filesystem is uploaded. Select <code>Upload</code> to flash the firmware to the board.</p> </li> </ol> <p>Warning</p> <p>DO NOT DISCONNECT the USB cable while the T-Stick is flashing.</p> <p>Tip</p> <p>If the T-Stick is not responding or there are issues with flashing try unscrew the cap closer for the ESP32-S3 endcap and hold the boot button while pressing the reset button to force the board into flash mode. If you do this you may need to press the reset button after flashing to force the T-Stick to flash again.</p> <p>Once the firmware is flashed you should see an orange light from the inside of the T-Stick. When the T-Stick successfully connects to a network you will see a flashing blue light.</p> <p>You can use the VSC/PlatformIO serial monitor to check if the T-Stick is booting properly. You should see T-Stick booting process.</p> <p>You can also interact with the controller using the following commands:</p> <ul> <li><code>ping</code> to get the T-Stick to reply pong</li> <li><code>reboot</code> to reboot</li> <li><code>sleep</code> to enter deep sleep</li> </ul>"},{"location":"designs/tstick-5gw/specs_5gw_enchanti/","title":"T-Stick 5GW-Enchanti","text":"<p>The T-Stick 5GW-Enchanti is a 5th generation T-Stick that uses Enchanti Touch Board. More details on 5th generation T-Sticks can be found here.</p>"},{"location":"designs/tstick-5gw/specs_5gw_enchanti/#specification","title":"Specification","text":"Feature Details Status Under development Release Year 2024 Communication Type Wi-Fi 4, 802.11 b/g/n Compatible protocols Open Sound Control (OSC)/Libmapper Touch Sensing Density 1 channel per 1cm Microcontroller ESP32-S3 Series Gestures Embedded? Yes Embedded Gestures Libraries Puara Gestures Sensors ICM20948 IMU, Trill Craft Capacitive Sensing Board (30 channels), Force Sensitive Resistor 408 Series, MAX17262 Fuel Gauge"},{"location":"designs/tstick-5gw/specs_5gw_enchanti/#osc-signal-namespace","title":"OSC Signal Namespace","text":"<p>Note</p> <p>Replace XXX for the T-Stick ID number</p>"},{"location":"designs/tstick-5gw/specs_5gw_enchanti/#raw-data","title":"Raw data","text":"Signal Name Type Range Description /TStick_XXX/raw/capsense i... 0  4095 Raw signal from the touch sensor. /TStick_XXX/raw/fsr i 0  4095 Raw signal from the force sensitive resistor /TStick_XXX/raw/accl fff  24 Raw signal from the accelerometer in 3-axis (x,y,z) /TStick_XXX/raw/gyro fff  42 Raw signal from the gyroscope in 3-axis (x,y,z) /TStick_XXX/raw/magn fff  0.001 Raw signal from the magnetometer in 3-axis (x,y,z)"},{"location":"designs/tstick-5gw/specs_5gw_enchanti/#battery-signals","title":"Battery Signals","text":"Signal Name Type Range Description /TStick_XXX/battery/percentage f 0  100 Battery percentage /TStick_XXX/battery/voltage f 0  4.2 Battery voltage (V) /TStick_XXX/battery/current f  2000 Battery current (mA)"},{"location":"designs/tstick-5gw/specs_5gw_enchanti/#button-signals","title":"Button Signals","text":"Signal Name Type Range Description /TStick_XXX/instrument/button/count i 0  x Number of times the button was tapped /TStick_XXX/instrument/button/tap i 0 or 1 Outputs 1 if the button was tapped /TStick_XXX/instrument/button/dtap i 0 or 1 Outputs 1 if the button was double tapped /TStick_XXX/instrument/button/ttap i 0 or 1 Outputs 1 if the button was triple tapped"},{"location":"designs/tstick-5gw/specs_5gw_enchanti/#touch-gestures","title":"Touch Gestures","text":"Signal Name Type Range Description /TStick_XXX/instrument/squeeze f 0  1 Normalised signal from the force sensitive resistor /TStick_XXX/instrument/touch/all f 0  1 /TStick_XXX/instrument/touch/top f 0  1 /TStick_XXX/instrument/touch/middle f 0  1 /TStick_XXX/instrument/touch/bottom f 0  1 /TStick_XXX/instrument/brush f 0  x cm/s /TStick_XXX/instrument/multibrush ffff 0  x cm/s /TStick_XXX/instrument/rub f 0  x cm/s /TStick_XXX/instrument/multirub ffff 0  x cm/s"},{"location":"designs/tstick-5gw/specs_5gw_enchanti/#inertial-gestures-signals","title":"Inertial Gestures Signals","text":"Signal Name Type Range Description /TStick_XXX/orientation ffff N/A Quaternions for T-Stick orientation /TStick_XXX/instrument/ypr fff  180\\(^{\\circ}\\)  90\\(^{\\circ}\\)  180\\(^{\\circ}\\) Yaw, pitch, roll of T-Stick /TStick_XXX/instrument/shakexyz fff 0  x Shake intensity in 3-axis (x,y,z) /TStick_XXX/instrument/jabxyz fff 0  x Jab intensity in 3-axis (x,y,z)"},{"location":"designs/tstick-5gw/specs_5gw_trill/","title":"T-Stick 5GW-Trill","text":"<p>The T-Stick 5GW-Trill is a 5th generation T-Stick that uses Bela's Trill Craft Touch Board. More details on 5th generation T-Sticks can be found here.</p>"},{"location":"designs/tstick-5gw/specs_5gw_trill/#guides","title":"Guides","text":"<p>For information on how to use the T-Stick 5GW-Trill check out the guides below:</p> <ul> <li> Build Guide</li> <li> Flashing Guide</li> <li> Connection Guide</li> </ul>"},{"location":"designs/tstick-5gw/specs_5gw_trill/#specifications","title":"Specifications","text":"Feature Details Status Recommended for new builds Release Year 2024 Communication Type Wi-Fi 4, 802.11 b/g/n Compatible protocols Open Sound Control (OSC)/Libmapper Touch Sensing Density 1 channel per 1cm Microcontroller ESP32-S3 Series Gestures Embedded? Yes Embedded Gestures Libraries Puara Gestures Sensors ICM20948 IMU, Trill Craft Capacitive Sensing Board (30 channels), Force Sensitive Resistor 408 Series, MAX17262 Fuel Gauge"},{"location":"designs/tstick-5gw/specs_5gw_trill/#osc-signal-namespace","title":"OSC Signal Namespace","text":"<p>Note</p> <p>Replace XXX for the T-Stick ID number</p>"},{"location":"designs/tstick-5gw/specs_5gw_trill/#raw-data","title":"Raw data","text":"Signal Name Type Range Description /TStick_XXX/raw/capsense i... 0  512 Raw signal from the touch sensor. /TStick_XXX/raw/fsr i 0  4095 Raw signal from the force sensitive resistor /TStick_XXX/raw/accl fff  24 Raw signal from the accelerometer in 3-axis (x,y,z) /TStick_XXX/raw/gyro fff  42 Raw signal from the gyroscope in 3-axis (x,y,z) /TStick_XXX/raw/magn fff  0.001 Raw signal from the magnetometer in 3-axis (x,y,z)"},{"location":"designs/tstick-5gw/specs_5gw_trill/#battery-signals","title":"Battery Signals","text":"Signal Name Type Range Description /TStick_XXX/battery/percentage f 0  100 Battery percentage /TStick_XXX/battery/voltage f 0  4.2 Battery voltage (V) /TStick_XXX/battery/current f  2000 Battery current (mA)"},{"location":"designs/tstick-5gw/specs_5gw_trill/#button-signals","title":"Button Signals","text":"Signal Name Type Range Description /TStick_XXX/instrument/button/count i 0  x Number of times the button was tapped /TStick_XXX/instrument/button/tap i 0 or 1 Outputs 1 if the button was tapped /TStick_XXX/instrument/button/dtap i 0 or 1 Outputs 1 if the button was double tapped /TStick_XXX/instrument/button/ttap i 0 or 1 Outputs 1 if the button was triple tapped"},{"location":"designs/tstick-5gw/specs_5gw_trill/#touch-gestures","title":"Touch Gestures","text":"Signal Name Type Range Description /TStick_XXX/instrument/squeeze f 0  1 Normalised signal from the force sensitive resistor /TStick_XXX/instrument/touch/all f 0  1 /TStick_XXX/instrument/touch/top f 0  1 /TStick_XXX/instrument/touch/middle f 0  1 /TStick_XXX/instrument/touch/bottom f 0  1 /TStick_XXX/instrument/brush f 0  x cm/s /TStick_XXX/instrument/multibrush ffff 0  x cm/s /TStick_XXX/instrument/rub f 0  x cm/s /TStick_XXX/instrument/multirub ffff 0  x cm/s"},{"location":"designs/tstick-5gw/specs_5gw_trill/#inertial-gestures-signals","title":"Inertial Gestures Signals","text":"Signal Name Type Range Description /TStick_XXX/orientation ffff N/A Quaternions for T-Stick orientation /TStick_XXX/instrument/ypr fff  180\\(^{\\circ}\\)  90\\(^{\\circ}\\)  180\\(^{\\circ}\\) Yaw, pitch, roll of T-Stick /TStick_XXX/instrument/shakexyz fff 0  x Shake intensity in 3-axis (x,y,z) /TStick_XXX/instrument/jabxyz fff 0  x Jab intensity in 3-axis (x,y,z)"},{"location":"engineering/design-guidelines/","title":"T-Stick Design Guidelines","text":""},{"location":"engineering/design-guidelines/#purpose","title":"Purpose","text":"<p>To improve interoperability between present and future T-Stick implementations.</p>"},{"location":"engineering/design-guidelines/#1-identity-characteristics","title":"1. Identity Characteristics","text":"<p>These features might be part of what makes an object identifiable as a T-Stick, and not some other instrument or object. These features are not normative, and serve more to introduce vocabulary that can be used in subsequent remarks.</p> <ol> <li>T-Stick is cylindrical.</li> <li>T-Stick usually has a diameter such that it can be held in one hand.</li> <li>T-Stick\u2019s outer cylindrical face has two sides; one side (termed \u201cthe top side\u201d) has a pressure sensor, and it is usually slightly squishy e.g. due to a layer of closed cell foam adhered on that side of the instrument. The other side (termed \u201cthe bottom side\u201d) has a (usually capacitive) fully multitouch touch sensor, and it is usually not squishy.</li> <li>T-Stick also senses information about the orientation and motion of the instrument in space, such as the direction in the global frame of reference it is pointing (i.e. \u201cpitch and yaw\u201d, aka \u201caltitude and azimuth\u201d, aka \u201cheading and inclination\u201d aka etc), usually using an inertial measurement unit (IMU), or magnetic-inertial measurement unit (MIMU).</li> <li>T-Stick usually has a recipient port for a serial communications bus connection at one end of the pipe, usually USB. This end is termed \u201cthe proximal end\u201d of the pipe, because it is often held closer to the heart of the T-Stick player. The other end of the pipe is termed \u201cthe distal end\u201d of the pipe.</li> <li>The ends of the pipe are usually closed off with end caps which sometimes have buttons, lights, and/or switches embedded in them, as well as the serial bus connector on the proximal end.</li> <li>In addition to the pipe that makes up the main body of the instrument, a T-Stick often has an internal structure. Sensors may be attached to the pipe, the internal structure, the endcaps, or a combination of these parts.</li> </ol>"},{"location":"engineering/design-guidelines/#2-hardware-standards","title":"2. Hardware Standards","text":"<p>These remarks are meant to be normative. Adherence to these remarks is meant to improve interoperability between present and future T-Stick implementations.</p> <p>Many of the following standards are based on the dimensions of materials readily available in Canada where most T-Sticks are currently made. T-Stick builders in regions where available materials are sold with different base dimensions may wish to define local standards.</p>"},{"location":"engineering/design-guidelines/#21-coordinate-systems","title":"2.1. Coordinate Systems","text":"<p>The global coordinate system used in T-Stick implementations is a right-handed East-North-Up 3-dimensional orthogonal Cartesian coordinate system. The positive X axis points to the East. The positive Y axis points North. The positive Z axis points up.</p> <p>The performance-local coordinate system used in T-Stick implementations is derived by a rotation of the global coordinate system about the Z axis, such that the performance-local X axis points from center stage to stage right (i.e. from left to right when standing on stage facing the audience), and the performance-local Y axis points from center stage to downstage (i.e. towards the audience).</p> <p>The T-Stick-local coordinate system is used to give directions relative to the body of the T-Stick. The X axis points from the proximal end of the pipe to the distal end of the pipe. The Y axis is determined from a 90 degree counterclockwise rotation of the X axis about the Z axis. The Z axis points from the bottom side of the pipe to the top side of the pipe.</p> <p>The reference origin is centered in the circular cross-section of the pipe, with X = 0 defined such that the origin lies in the cutting plane that defines the proximal end of the pipe before end caps are attached. </p> <p></p> <p>Dimensions must given in millimeters (mm). Alternative representations in other units such as inches (in), feet (ft), centimeters (cm), or other units may be given in addition to the dimension in mm when convenient to aid comprehension.</p>"},{"location":"engineering/design-guidelines/#22-consort-dimensions","title":"2.2. Consort Dimensions","text":"<p>T-Sticks can be made in a variety of sizes, shown in table 1.</p> <p>All T-Sticks in this consort use standard 1 \u00bd\u201d ABS pipe (typically manufactured for use in plumbing fixtures) with an outer diameter of 42.164 mm (1.6600 in) and an inner diameter of 35.179 mm (1.3850 in).</p> <p>The base unit of length of a T-Stick is 304.8 mm (12 in, 1 ft). The different T-Stick sizes are all multiples of this base length. This length is chosen for maximum yield of T-Sticks from readily available lengths of pipe, which are normally sold by the foot.</p> <p>Table 1: T-Stick Sizes</p> \u201cRange\u201d Length of pipe (without end caps) Sopranino 304.8 mm (12 in, 1 ft) Soprano 609.6 mm (24 in, 2 ft) Alto 914.4 mm (36 in, 3 ft) Tenor 1219.2 mm (48 in, 4 ft) Bass 1524.0 mm (60 in, 5 ft) Contrabass 1828.8 mm (72 in, 6 ft)"},{"location":"engineering/design-guidelines/#23-mounting-holes","title":"2.3. Mounting Holes","text":"<p>Mounting holes on the PCB and internal structure shall be spaced 12.7 mm (\u00bd in) apart along the X axis, starting 6.35 mm (\u00bc in) from the origin (i.e. from the proximal opening of the pipe). Adherence to this standard enables parts to be designed without strict coupling.</p>"},{"location":"engineering/design-guidelines/#24-pcbs","title":"2.4. PCBs","text":"<p>If PCBs are used the following characteristics should be followed to improve interoperability between designs.</p> <ol> <li>PCBs shall not have dimension in the Y axis greater than 31.75 mm (1.25 in).</li> <li>The bottom surface of PCBs should not have any surface mount components or through hole component legs.</li> </ol>"},{"location":"engineering/design-guidelines/#3-sensor-measurements","title":"3. Sensor Measurements","text":"<p>These remarks are meant to be normative. Adherence to these remarks is meant to improve interoperability between present and future T-Stick implementations. The T-Stick should be able to measure or approximate the following properties:</p> <ol> <li>Acceleration</li> <li>Orientation</li> <li>Pressure</li> <li>Multi-finger touch</li> <li>Taps</li> <li>Jabs</li> <li>Brushes</li> <li>Rubs</li> </ol> <p>It is recommended to use a similar set of sensors and algorithms as previous T-Stick designs to maintain similar behavior across T-Sticks. </p>"},{"location":"engineering/design-guidelines/#4-signal-namespace","title":"4. Signal Namespace","text":"<p>If interoperability with previous T-Stick pieces is desired the following guidelines should be followed:</p> <ol> <li>The T-Stick should use an existing namespace. Check previous designs for past and current namespaces.</li> <li>If you wish for the T-Stick to be able to play older pieces an external translation layer should be made for musicians/artists.</li> </ol>"},{"location":"engineering/gestures/","title":"Puara Gestures","text":"<p>Note: Article still a Work in Progress</p>"},{"location":"engineering/gestures/#read-more","title":"Read More","text":"<ul> <li>Source Code</li> <li>Documentation</li> </ul>"},{"location":"engineering/gestures/#high-level-gesture-vocabulary-for-the-t-stick","title":"High-Level gesture vocabulary for the T-Stick","text":"<p>Presented codes are arduino compatible.</p>"},{"location":"engineering/gestures/#summary","title":"Summary:","text":"<ul> <li>Puara Gestures</li> <li>Read More</li> <li>High-Level gesture vocabulary for the T-Stick<ul> <li>Summary:</li> <li>Signal structures and global variables:</li> <li>functions</li> <li>/instrument</li> <li>/instrument/touch/<ul> <li>/instrument/touch/all (InstrumentData.touchAll)</li> <li>/instrument/touch/top (InstrumentData.touchTop)</li> <li>/instrument/touch/body (InstrumentData.touchBody)</li> <li>/instrument/touch/middle (InstrumentData.touchMiddle)</li> <li>/instrument/touch/bottom (InstrumentData.touchBottom)</li> </ul> </li> <li>/instrument/brush<ul> <li>/instrument/brush/up /down</li> <li>/instrument/brush/amplitude (brush)</li> <li>/instrument/brush/energy (rub)</li> <li>/instrument/amplitude /roll /tilt</li> <li>/instrument/shake /jerk</li> <li>/instrument/jab (INCOMPLETE)</li> </ul> </li> </ul> </li> </ul>"},{"location":"engineering/gestures/#signal-structures-and-global-variables","title":"Signal structures and global variables:","text":"<pre><code>byte touchByteSize = 2; // bytes necessary to represent all the stripes (1-bit per stripe) = 2 for the sopranino\nbyte touchSizeAll = touchByteSize * 8 ; // total amount of T-Stick stripes (8 bits per byte)\nbyte touchSizeEdge = 4; // amount of T-Stick stripes for top and bottom portions of the T-Stick (arbitrary)\nfloat leakyConstant = 0.05;\nfloat shakeArray[5] = {0,0,0,0,0};\nbyte shakeArrayindex = 0;\nfloat jabArray[5] = {0,0,0,0,0};\nbyte jabArrayindex = 0;\nfloat shakeAccum = 0;\nfloat cartopolAmplitude = 0;\nfloat cartopolAngle = 0;\n\nstruct RawDataStruct { // initialized as RawData\n  byte touch[touchByteSize]; // /raw/capsense, i..., 0--255, ... (1 int per 8 capacitive stripes -- 8 bits)\n  float fsr; // /raw/fsr, i, 0--4095\n  float piezo; // /raw/piezo, i, 0--1023\n  float accl[3]; // /raw/accl, fff, +/-16, +/-16, +/-16 (g linear acceleration full scale), converted from sensor data with range +/-32767 (integers)\n  float gyro[3]; // /raw/gyro, fff, +/-2000, +/-2000, +/-2000 (dps angular rate full scale), converted from sensor data with range +/-34.90659 (floats)\n  float magn[3]; // /raw/magn, iii, fff, +/-16, +/-16, +/-16 (gauss magnetic full scale), converted from sensor data with range +/-32767 (integers)\n  float raw[9]; // /raw (IMU data to be send to callibration app)\n  float quat[4]; // /raw/quat, ffff, ?, ? ,? ,?\n  float ypr[3]; // /raw/ypr, fff, ?, ? ,?\n};\n</code></pre> <pre><code>struct NormDataStruct { // initialized as NormData\n  float fsr; // /norm/fsr, f, 0--1\n  float piezo; // /norm/piezo, f, 0--1\n  float accl[3]; // /norm/accl, fff, +/-1, +/-1, +/-1\n  float gyro[3]; // /norm/gyro, fff, +/-1, +/-1, +/-1\n  float magn[3]; // /norm/magn, fff, +/-1, +/-1, +/-1\n};\n</code></pre> <pre><code>struct LastStateDataStruct { // initialized as LastStateData\n  byte touch[touchByteSize]; // last state of /raw/capsense\n  byte brushUp;\n  byte brushDown;\n  float shake;\n  float shakeAccum;\n};\n</code></pre> <pre><code>struct InstrumentDataStruct { // initialized as InstrumentData\n  byte touchAll[touchByteSize]; // surface contact\n  byte touchTop;\n  byte touchBody[touchByteSize-1];\n  byte touchMiddle[touchByteSize-2];\n  byte touchBottom;\n  byte brushUp;\n  byte brushDown;\n  byte brushAmplitude;\n  byte energy;\n  float amplitude;\n  float roll;\n  float tilt;\n  float shake;\n  float jerk;\n};\n</code></pre>"},{"location":"engineering/gestures/#functions","title":"functions","text":"<ul> <li>Implement bit read/write function (not needed for arduino, bitRead and bitWrite function is already included):</li> </ul> <pre><code>bool bitRead(byte target, byte index){\n    return ((target &gt;&gt; index) &amp; 1U);\n}\n\nvoid bitWrite(byte destiny, byte index, byte origin){\n    if (bitRead(destiny, index) != bitRead(origin, index)) {\n        destiny.flip(index);\n    }\n}\n</code></pre> <ul> <li>Implement function to calculate mean for a given bit range</li> </ul> <pre><code>float bitMean (byte capsense_array[], byte first_bit, byte last_bit) { // calculates mean for a given bit range\n    float mean = 0;\n    For ( i = first_bit; i &lt; last_bit; i++ ) {\n        byte array_index = i/8;\n        byte target_index = i - (8 * array_index);\n        If ( bitRead(capsense_array[array_index], target_index) ) { // read each bit ...\n        mean += 1/ (last_bit - first_bit); // ... and add if its high\n        }\n    }\n    return mean;\n}\n</code></pre> <ul> <li>Leaky integrator:</li> </ul> <pre><code>float leakyIntegrator (float reading, float old_value,float leak) {\n  return reading + (old_value * leak)\n}\n</code></pre> <ul> <li>Windowed Extrema (getting max and min values out of a window). Dont forget to populate <code>shakeArray</code></li> </ul> <pre><code>float windowedExtremaMax (float array[]) {\n  float result = 0;\n  For ( i=0; i &lt; sizeof(array)/sizeof(array[0]); i++ ) {\n    result = max(result, array[i]);\n  }\n  return result;\n}\n\nfloat windowedExtremaMin (float array[]) {\n  float result = 0;\n  For ( i=0; i &lt; sizeof(array)/sizeof(array[0]); i++ ) {\n    result = min(result, array[i]);\n  }\n  return result;\n}\n</code></pre> <ul> <li>1st order IIR filter for sensor data:</li> </ul> <pre><code>float lowPassFilter (data,olddata,k) {\n  return olddata + ((data - olddata)/k)\n}\n</code></pre>"},{"location":"engineering/gestures/#instrument","title":"/instrument","text":""},{"location":"engineering/gestures/#instrumenttouch","title":"/instrument/touch/","text":""},{"location":"engineering/gestures/#instrumenttouchall-instrumentdatatouchall","title":"/instrument/touch/all (InstrumentData.touchAll)","text":"<ul> <li>InstrumentData.touchAll: get the \"amount of touch\" normalized between 0 and 1</li> </ul> <pre><code>InstrumentData.touchAll = bitMean(RawData.touch, 0, touchSizeAll);\n</code></pre>"},{"location":"engineering/gestures/#instrumenttouchtop-instrumentdatatouchtop","title":"/instrument/touch/top (InstrumentData.touchTop)","text":"<ul> <li>InstrumentData.touchTop: similar to /instrument/touch/all, but applied only to the \"top\" region of the capsense</li> </ul> <pre><code>InstrumentData.touchTop = bitMean(RawData.touch, 0, touchSizeEdge);\n</code></pre>"},{"location":"engineering/gestures/#instrumenttouchbody-instrumentdatatouchbody","title":"/instrument/touch/body (InstrumentData.touchBody)","text":"<ul> <li>InstrumentData.touchBody: similar to /instrument/touch/all, but applied only to the \"body\" region of the capsense</li> </ul> <pre><code>InstrumentData.touchBody = bitMean(RawData.touch, touchSizeEdge, touchSizeAll);\n</code></pre>"},{"location":"engineering/gestures/#instrumenttouchmiddle-instrumentdatatouchmiddle","title":"/instrument/touch/middle (InstrumentData.touchMiddle)","text":"<ul> <li>InstrumentData.touchMiddle: similar to /instrument/touch/middle, but applied only to the \"middle\" region of the capsense</li> </ul> <pre><code>InstrumentData.touchMiddle = bitMean(RawData.touch, touchSizeEdge, (touchSizeAll - touchSizeEdge) );\n</code></pre>"},{"location":"engineering/gestures/#instrumenttouchbottom-instrumentdatatouchbottom","title":"/instrument/touch/bottom (InstrumentData.touchBottom)","text":"<ul> <li>InstrumentData.touchBottom: similar to /instrument/touch/all, but applied only to the \"top\" region of the capsense</li> </ul> <pre><code>InstrumentData.touchBottom = bitMean(RawData.touch, (touchSizeAll - touchSizeEdge), touchSizeAll);\n</code></pre>"},{"location":"engineering/gestures/#instrumentbrush","title":"/instrument/brush","text":""},{"location":"engineering/gestures/#instrumentbrushup-down","title":"/instrument/brush/up /down","text":"<pre><code>operation_up = (LastStateData.brushUp &amp; RawData.touch)\noperation_down = (LastStateData.brushDown &amp; RawData.touch)\n\nFor ( i = 0; i &lt; number_of_touch; i++ ) {\n    if ( bitRead(operation_up, i) ) { \n        InstrumentData.brushUp = (number_of_touch - i) / number_of_touch;\n        mean_up += 1/ number_of_touch;\n        }\n    if ( bitRead(operation_down, i) ) {\n        InstrumentData.brushDown = (number_of_touch - i) / number_of_touch;\n        mean_down += 1/ number_of_touch;\n        }\n}\n</code></pre>"},{"location":"engineering/gestures/#instrumentbrushamplitude-brush","title":"/instrument/brush/amplitude (brush)","text":"<pre><code>InstrumentData.brushAmplitude = InstrumentData.brushDown - InstrumentData.brushUp\n</code></pre>"},{"location":"engineering/gestures/#instrumentbrushenergy-rub","title":"/instrument/brush/energy (rub)","text":"<pre><code>if (InstrumentData.brushUp &gt; InstrumentData.brushDown) {\n  InstrumentData.energy = InstrumentData.brushUp\n}\nelse {\n  InstrumentData.energy = InstrumentData.brushDown\n}\n</code></pre>"},{"location":"engineering/gestures/#instrumentamplitude-roll-tilt","title":"/instrument/amplitude /roll /tilt","text":"<p>(range +/- 2 ?)</p> <pre><code>cartopolAmplitude = sqrt( pow((((RawData.accl[1] * 2) - 128) * -1),2) + pow((((RawData.accl[2] * 2) - 128) * -1)) )\ncartopolAngle = tan-1 ( (((RawData.accl[2] * 2) - 128) * -1) / (((RawData.accl[1] * 2) - 128) * -1) )\nInstrumentData.amplitude = sqrt( pow(cartopolAmplitude) + pow(((RawData.accl[0] * 2) - 128)) )\nInstrumentData.roll = cartopolAngle + 3.14159\nInstrumentData.tilt = tan-1 ( ((RawData.accl[0] * 2) - 128) / cartopolAmplitude)\n</code></pre>"},{"location":"engineering/gestures/#instrumentshake-jerk","title":"/instrument/shake /jerk","text":"<pre><code>// populating shakeArray each loop)\nshakeArray[shakeArrayindex] = InstrumentData.amplitude;\nif (shakeArrayindex &lt; 5) {\n  shakeArrayindex += 1; \n}\nelse {\n  shakeArrayindex = 0;\n}\n\nshakeAccum = -(windowedExtremaMax(shakeArray[]) - windowedExtremaMin(shakeArray[]));\nshakeAccum = leakyIntegrator(shakeAccum,LastStateData.shakeAccum,leakyConstant);\nInstrumentData.shake = lowPassFilter(shakeAccum,LastStateData.shake,20);\n\nInstrumentData.jerk = shakeAccum - InstrumentData.shake;\n</code></pre>"},{"location":"engineering/gestures/#instrumentjab-incomplete","title":"/instrument/jab (INCOMPLETE)","text":"<pre><code>// populating jabArray each loop)\nshakeArray[jabArrayindex] = InstrumentData.jab;\nif (jabArrayindex &lt; 5) {\n  jabArrayindex += 1; \n}\nelse {\n  jabArrayindex = 0;\n}\n\nInstrumentData.jab = windowedExtremaMax(jabArray[]) - windowedExtremaMin(jabArray[]);\n\n\n\nRawData.accl[0]\n\n\nAndrew\n\nthrust\nshake\nspin\nframe (populated inside?)\nrest vs effort\n\nTravis\n\nJab\neggbeater\neggwhip\ntilt\nhold\nsqueez\n\n#### Update Last State Values\nLastStateData.brushUp = (RawData.touch &lt;&lt; 1) &amp; (~ RawData.touch) LastStateData.brushDown = (RawData.touch &gt;&gt; 1) &amp; (~ RawData.touch)\n</code></pre>"},{"location":"engineering/requirements/","title":"Technical Requirements and Constraints","text":"<p>This page outline the technical requirements of the T-Stick as well as constraints inherited from previous designs. The goal is that with these technical requirements and constraints someone will be able to build a T-Stick that is functionally similar to the designs that have previously been built.</p>"},{"location":"engineering/requirements/#verification-method-table","title":"Verification Method table","text":"Verification Method (IADT) Inspection Visual inspection of the device Analysis Simulation, mathematical models and data analysis Demonstration Demonstrate the functionality for the user Test More rigorous form of demonstration to show performance"},{"location":"engineering/requirements/#technical-requirements","title":"Technical Requirements","text":"<p>The technical requirements are split into 5 sections representing each of the major subsystems of the T-Stick and a section for manufacturing and reliability requirements.</p>"},{"location":"engineering/requirements/#1-control-and-communication-system","title":"1. Control and Communication System","text":"<p>Control and Communication System of the T-Stick is the set of hardware and software components that handle the controlling and regulating the instrument which includes: configuring the instrument, communicating with the instrument, communication between subsystems, and managing the main control loop. </p> ID Requirements Verification Method (IADT) 1 Control System 1.1 The control rate of the system should be at least 1000HZ and will be no slower than 200Hz. Test 1.2 Continuous signals will have a wireless signal rate of at least 100Hz. Test/Analysis 1.3 Wireless Signal Latency will be below 10ms. Test/Analysis 1.4 Wireless Signal Jitter will be below 2ms. Test/Analysis 1.5 The communication system will send any errors experienced by other subsystems to the user. Demonstration 1.5.1 The communication system will send errors experienced by the sensor system to the user. Demonstration 1.5.2 The communication system will send errors experienced by the power system to the user, excluding errors that cause a complete power delivery failure. Demonstration 1.5.3 The communication system will send errors experienced by the control and communication system to the user. Demonstration"},{"location":"engineering/requirements/#11-the-control-rate-of-the-system-should-be-at-least-1000hz-and-will-be-no-slower-than-200hz","title":"1.1: The control rate of the system should be at least 1000HZ and will be no slower than 200Hz.","text":"<p>1000Hz allows responsive control of the T-Stick.</p>"},{"location":"engineering/requirements/#12-continuous-signals-will-have-a-wireless-signal-rate-of-at-least-100hz","title":"1.2: Continuous signals will have a wireless signal rate of at least 100Hz.","text":"<p>Wireless signal rates below 100Hz are not desired. Slow wireless rates have lead to poor and inconsistent performance when paired with libmapper.</p>"},{"location":"engineering/requirements/#13-wireless-signal-latency-will-be-below-10ms","title":"1.3: Wireless Signal Latency will be below 10ms.","text":"<p>Wireless latency for signals need to be below 10ms for continuous signals to have a signal rate of 100Hz.</p>"},{"location":"engineering/requirements/#14-wireless-signal-jitter-will-be-below-2ms","title":"1.4: Wireless Signal Jitter will be below 2ms.","text":"<p>Jitter should be reasonably low for a reliable and robust wireless performance.</p>"},{"location":"engineering/requirements/#15-the-communication-system-will-send-any-errors-experienced-by-other-subsystems-to-the-user","title":"1.5: The communication system will send any errors experienced by other subsystems to the user","text":"<p>The communication system should handle sending any errors to the user wirelessly or wired. This helps the user understand what is going on with their T-Stick when things go wrong.</p>"},{"location":"engineering/requirements/#2-power-system-requirements","title":"2. Power System Requirements","text":"<p>The Power System of the T-Stick handles delivering power to all components of the T-Stick and measuring the remaining power when the T-Stick is on battery power. Hardware components such as regulators, and fuel gauges, as well as software components such as battery life estimation algorithms. </p> ID Requirements Verification Method (IADT) 2 Power System 2.1 The device will be able to be powered both wirelessly and wired. Demonstration 2.2 The power system will be able to provide continuous power to the T-Stick for at least 2 hours on a single charge. Test 2.3 The power system will be able to measure the battery voltage with an average error of less than 1%. Test 2.4 The power system will be able to measure the state of charge of the battery with an average error of less than 10%. Analysis 2.5 The power system will be able to estimate the battery life with an average error of less than 10%. Test"},{"location":"engineering/requirements/#21-the-device-will-be-able-to-be-powered-both-wirelessly-and-wired","title":"2.1: The device will be able to be powered both wirelessly and wired.","text":"<p>The current generation of T-Sticks are both battery and USB powered, we are keeping this feature.</p>"},{"location":"engineering/requirements/#22-the-power-system-will-be-able-to-provide-continuous-power-to-the-t-stick-for-at-least-2-hours-on-a-single-charge","title":"2.2: The power system will be able to provide continuous power to the T-Stick for at least 2 hours on a single charge.","text":"<p>Two hours is considered a reasonable amount of time to play and perform with the T-Stick before needing a charge. The number can be increased based on conversations with artist to determine what battery life we should be aiming for.</p>"},{"location":"engineering/requirements/#23-the-power-system-will-be-able-to-measure-the-battery-voltage-with-an-average-error-of-less-than-1","title":"2.3: The power system will be able to measure the battery voltage with an average error of less than 1%.","text":"<p>Accurate battery voltage measurements allow the T-Stick to better estimate when the battery health is starting to decline. This is useful as it can give artist advanced warning of when their batteries need to be replaced.</p>"},{"location":"engineering/requirements/#24-the-power-system-will-be-able-to-estimate-the-battery-capacity-of-the-battery-with-an-average-error-of-less-than-10","title":"2.4: The power system will be able to estimate the battery capacity of the battery with an average error of less than 10%.","text":"<p>Accurate battery capacity measurements allow the T-Stick to better estimate when the battery health is starting to decline. This is useful as it can give artist advanced warning of when their batteries need to be replaced.</p>"},{"location":"engineering/requirements/#25-the-power-system-will-be-able-to-estimate-the-battery-life-with-an-average-error-of-less-than-10","title":"2.5: The power system will be able to estimate the battery life with an average error of less than 10%.","text":"<p>Accurate battery life estimation is useful to artist as it gives feedback on when they should charge their T-Sticks</p>"},{"location":"engineering/requirements/#3-sensor-system-requirements","title":"3. Sensor System Requirements","text":"<p>The Sensor System of the T-Stick manages the initialization, communication, and analysis of sensors in the T-Stick. This includes all the sensors excluding sensors related to power management and the software components that communicate with the sensors and process their data.</p> ID Requirements Verification Method (IADT) 3 Sensor System 3.1 The sensor system should have a polling rate of at least 1000Hz for continuous signals. Test 3.2 The sensor system will have an average error of less than 1%. Analysis/Test 3.3 The sensor system will be able to detect when sensors are not communicating. Demonstration 3.4 The sensor system will be able to identify sensors that are not communicating. Demonstration 3.5 The sensor system will continue operating regardless of the states of the sensors Test 3.6 The sensor system will have a calibration mode which enables artist to manually calibrate the sensors. Demonstration/Test 3.7 The sensor system will be able to measure or approximate the following properties listed in Section 3 of the T-Stick Design Guidelines. Demonstration"},{"location":"engineering/requirements/#31-the-sensor-system-will-have-a-polling-rate-of-at-least-1000hz","title":"3.1: The sensor system will have a polling rate of at least 1000Hz.","text":"<p>The sensor system needs have a high polling rate of the sensors to allow for fast controls on the T-Stick. See the control and communication system requirement.</p>"},{"location":"engineering/requirements/#32-the-sensor-system-will-have-an-average-error-of-less-than-1","title":"3.2: The sensor system will have an average error of less than 1%.","text":"<p>Highly accurate sensor measurements increase confidence for the artist that the T-Stick will do what they tell it to do.</p>"},{"location":"engineering/requirements/#33-the-sensor-system-will-be-able-to-detect-when-sensors-are-not-communicating","title":"3.3: The sensor system will be able to detect when sensors are not communicating.","text":"<p>Detecting sensor system errors is useful for troubleshooting problems with the T-Stick</p>"},{"location":"engineering/requirements/#34-the-sensor-system-will-be-able-to-identify-sensors-that-are-not-communicating","title":"3.4: The sensor system will be able to identify sensors that are not communicating.","text":"<p>Identifying which sensors are not communicating is useful as it allows the TY-Stick to disable them, and skip trying to poll them.</p>"},{"location":"engineering/requirements/#35-the-sensor-system-will-continue-operating-regardless-of-the-states-of-the-sensors","title":"3.5: The sensor system will continue operating regardless of the states of the sensors","text":"<p>The entire T-Stick should keep working even if some sensors are not communicating. Furthermore, it makes it more obvious for artist as to which sensor is not working.</p>"},{"location":"engineering/requirements/#36-the-sensor-system-will-have-a-calibration-mode-which-enables-artist-to-manually-calibrate-the-sensors","title":"3.6 The sensor system will have a calibration mode which enables artist to manually calibrate the sensors.","text":"<p>Calibration is important, as it improves sensor accuracy and precision, artist should have the option to use a calibration mode to improve the performance of the T-Stick.</p>"},{"location":"engineering/requirements/#4-reliability-and-maintainability","title":"4. Reliability and Maintainability","text":"<p>As the name suggests this section contains all requirements relating to reliability and availability. This includes a PIR and PMR target for the T-Stick. The robustness requirements are to ensure the T-Stick can handle elevated levels of shaking and jabbing for short periods of time without permanent failures.</p> ID Requirements Verification Method (IADT) 4 Reliability and Availability 4.1 The T-Stick will have a Practice/Performance Interruption Rate (PIR) of 1%. Analysis 4.2 The T-Stick will have a Playing/Maintenance Ratio (PMR) of at least 1. Analysis 4.3 The T-Stick will be robust to jabs. Test 4.4 The T-Stick will be robust to shakes. Test"},{"location":"engineering/requirements/#41-the-t-stick-will-have-a-practice-interruption-rate-pir-of-1","title":"4.1: The T-Stick will have a Practice Interruption Rate (PIR) of 1%","text":"<p>Low PIR means that artist can be more confident with using the instrument without having to constantly require maintenance from a technician/luthier.</p>"},{"location":"engineering/requirements/#42-the-t-stick-will-have-a-performancemaintenance-ratio-pmr-of-at-least-1","title":"4.2: The T-Stick will have a Performance/Maintenance Ratio (PMR) of at least 1.","text":"<p>A high PMR ratio means that we get a large amount of performance hours per hour of maintenance.</p>"},{"location":"engineering/requirements/#43-the-t-stick-will-be-robust-to-jabs","title":"4.3:  The T-Stick will be robust to jabs.","text":"<p>Jabs are an important gesture for the T-Stick. Performers should be able to do them freely without worrying about failures.</p>"},{"location":"engineering/requirements/#44-the-t-stick-will-be-robust-to-shakes","title":"4.4: The T-Stick will be robust to shakes.","text":"<p>Shakes are an important gesture for the T-Stick. Performers should be able to do them freely without worrying about failures.</p>"},{"location":"engineering/requirements/#5-manufacturing-requirements","title":"5. Manufacturing Requirements","text":"<p>The manufacturability Requirements are all the requirements related to the manufacturing of T-Sticks including constraints on the Bill of Materials (BOM), required documentation, and time to assemble the T-Stick. </p> ID Requirements Verification Method (IADT) 5 Manufacturability 5.1 The T-Stick will follow the design guidelines and requirements outlined in sections 1 and 2 of the T-Stick Design Guidelines. Demonstration 5.2 The physical design documentation will include a bill of materials. Demonstration 5.2.1 The bill of materials will have fewer than 64 individual parts, including fly wires, screws, nuts, and heat shrink. Demonstration 5.2.2 The bill of materials will have fewer than 40 distinct types of parts. Demonstration 5.3 The physical design documentation will include a schematic. Demonstration 5.4 The physical design documentation will include assembly instructions. Demonstration 5.5 The mean time to assemble one T-Stick, not counting the time to gather parts and materials, will be less than 5 hours. Test 5.6 The final assembly and repair of the T-Stick will be possible using only a soldering iron, wire stripper/cutter, heat gun, saw, and hex key. Demonstration 5.7 The T-Stick will use common readily available parts and materials. Demonstration"},{"location":"engineering/requirements/#51-the-t-stick-will-follow-the-design-guidelines-and-requirements-outlined-in-sections-1-and-2-of-the-t-stick-design-guidelines","title":"5.1: The T-Stick will follow the design guidelines and requirements outlined in Sections 1 and 2 of the  T-Stick Design Guidelines.","text":"<p>Sections 1 and 2 of the T-Stick design guidelines outline the physical constraints that make up the T-Stick. If new designers which to make T-Sticks these should be followed to maximise playability of older pieces. Note that due to the rapid changes in the hardware space and firmware changes to the T-Stick it may not be possible to design a T-Stick that is identical to a previous design.</p>"},{"location":"engineering/requirements/#52-the-physical-design-documentation-will-include-a-bill-of-materials","title":"5.2: The physical design documentation will include a bill of materials.","text":"<p>As an open source project that we want others to replicate, a bill of materials is important. We include this as a requirement to ensure it is done as part of the design cycle and not as an afterthought.</p>"},{"location":"engineering/requirements/#53-the-physical-design-documentation-will-include-a-schematic","title":"5.3: The physical design documentation will include a schematic.","text":"<p>A schematic is useful for builders as it shows them how all the electronics are connected.</p>"},{"location":"engineering/requirements/#54-the-physical-design-documentation-will-include-assembly-instructions","title":"5.4: The physical design documentation will include assembly instructions.","text":"<p>As an open source project that we want others to replicate, a bill of materials is important. We include this as a requirement to ensure it is done as part of the design cycle and not as an afterthought.</p>"},{"location":"engineering/requirements/#55-the-mean-time-to-assemble-one-t-stick-not-counting-the-time-to-gather-parts-and-materials-will-be-less-than-5-hours","title":"5.5: The mean time to assemble one T-Stick, not counting the time to gather parts and materials, will be less than 5 hours.","text":"<p>The T-Stick should not take more than a day to build for new builders.</p>"},{"location":"engineering/requirements/#56-the-final-assembly-and-repair-of-the-t-stick-will-be-possible-using-only-a-soldering-iron-wire-strippercutter-heat-gun-saw-and-hex-key","title":"5.6: The final assembly and repair of the T-Stick will be possible using only a soldering iron, wire stripper/cutter, heat gun, saw, and hex key.","text":"<p>The T-Stick should be able to be built using common tools to help facilitate low-cost manufacturing.</p>"},{"location":"engineering/requirements/#57-the-t-stick-will-use-common-readily-available-parts-and-materials","title":"5.7: The T-Stick will use common readily available parts and materials.","text":"<p>The T-Stick should be able to be built using common components to help facilitate low-cost manufacturing.</p>"},{"location":"getting-started/","title":"Getting Started with your T-Stick","text":""},{"location":"getting-started/#t-stick-variants","title":"T-Stick Variants","text":"Generation Model Variations Platform 1G Alto, Tenor None Atmega8 2G Sopranino, Soprano, Tenor 2G, 2GX, 2GG, 2G-IMU, 2GW Arduino, ESP8266 3G Soprano None Arduino 4G Sopranino, Soprano 4GW-2018, 4GW-2021 ESP32 5G Sopranino, Soprano 5GW-Trill, 5GW-Enchanti ESP32-S3"},{"location":"getting-started/#building-flashing-and-connecting-to-your-t-stick","title":"Building, Flashing and Connecting to your T-Stick","text":"<p>Guides for building, flashing and connectiong to various T-Sticks.</p>"},{"location":"getting-started/#4th-generation-t-sticks","title":"4th Generation T-Sticks","text":"<p>The 4th Generation of T-Sticks is the first generation of Wi-Fi based T-Sticks. The serial protocol and signal namespace used in the 1st and 2nd generation T-Sticks is not carried over to the 4th generation of T-Sticks. These T-Sticks used the ESP32 SoC from Espressif, a successor to the ESP8266. There are two variants of 4G T-Sticks. The T-Stick 4GW-2018 and the T-Stick 4GW-2021.</p> <p> Click here for more details on 4th generation T-Sticks</p>"},{"location":"getting-started/#5th-generation-t-sticks","title":"5th Generation T-Sticks","text":"<p>The 5th Generation T-Sticks consists of a custom ESP32 board which integrates a ESP32-S3 WROOM 2 Module with a ICM20948 IMU and MAX17262 on a single board, and a touch board that has a pinout for the Trill Craft board as well as, two JST-SH 4 pin connectors to daisy chain multiple touch boards together.</p> <p> Click here for more details on 5th generation T-Sticks</p>"},{"location":"setup/","title":"Advanced Settings","text":"<p>There are multiple configuration options you can change for your T-Stick if the default options are not to your liking.</p> <ul> <li> WiFi Settings</li> <li> Sensor Settings</li> <li> Config and Setting File</li> </ul>"},{"location":"setup/advanced-settings/","title":"Sensor Settings","text":"<p>Note</p> <p>This page only applies to the T-Stick 4GW/5GW and their variants.</p> <p>To access the T-Stick Settings page, access the T-Stick Setup page using the instructions shown in the connection guide.</p> <p>You can access the settings of your T-Stick by connecting to the</p>"},{"location":"setup/advanced-settings/#sensor-settings_1","title":"Sensor Settings","text":"<ul> <li>fsr_offset: Set the minimum value of the FSR when no pressure is being applied. (Default: 2000)</li> <li>touch_noise: Set the minimum value before a touch input is registered. Only applies to T-Sticks that use the Trill board or the EnchantiTouch board. (Default: 50)</li> <li>jab_threshold: Set the sensitivity of the jab gesture. Larger values lower the sensitivity of the jab signal. (Default 5)</li> <li>battery_size-mah: Set the battery size in mAh. Only applies to T-Stick 5GW using the MAX17055/MAX17262 fuel gauge. (Default 2000)</li> </ul>"},{"location":"setup/json-settings/","title":"JSON settings","text":"<p>Note</p> <p>This page only applies to the T-Stick 4GW/5GW and their variants.</p> <p>Several parameters for the T-Stick are defined in the <code>config.json</code> and <code>settings.json</code> files in the data folder of the T-Stick firmware.</p>"},{"location":"setup/json-settings/#configjson-settings","title":"config.json Settings","text":"<p>The <code>config.json</code> file holds configuration information for the T-Stick including the name of the device, ID number, wifi connection details and the OSC configuration details.</p> <p>The default <code>config.json</code> file is shown below.</p> <pre><code>{\n    \"device\": \"TStick\",\n    \"id\": 1,\n    \"author\": \"T-Stick Builder\",\n    \"institution\": \"SAT/IDMIL (2024)\",\n    \"APpasswd\": \"mappings\",\n    \"wifiSSID\": \"tstick_network\",\n    \"wifiPSK\": \"mappings\",\n    \"persistentAP\": 1,\n    \"oscIP1\": \"192.168.137.1\",\n    \"oscPORT1\": 8000,\n    \"oscIP2\": \"0.0.0.0\",\n    \"oscPORT2\": 8001,\n    \"localPORT\": 8000\n}\n</code></pre>"},{"location":"setup/json-settings/#properties","title":"Properties","text":"<ul> <li>device: Name of the device. Should not be changed. (Default: TStick)</li> <li>id: ID number of the T-Stick. (Default: 1)</li> <li>author: Owner/Builder of the T-Stick. (Default: T-Stick Builder)</li> <li>institution: Institution that owns/builds the T-Stick. (Default: SAT/IDMIL (2024))</li> <li>APpasswd: Password to the T-Sticks Access Point. (Default: mappings)</li> <li>wifiSSID: Name of WiFi network the T-Stick is connecting to. (Default: tstick_network)</li> <li>wifiPSK: Password of WiFi network the T-Stick is connecting to. (Default: mappings)</li> <li>persistentAP: Set to 1 for the access point of the T-Stick to always be available. Should not be changed from default. (Default: 1)</li> <li>oscIP1/2: IP address to send OSC messages to. Can be set to <code>0.0.0.0</code> to disable OSC. (Default: oscIP1: 192.168.137.1/oscIP2: 0.0.0.0)</li> <li>oscPORT1/2: Port OSC messages are sent to. (Default: oscPORT1: 8000/ oscPORT2: 8001)</li> <li>localPORT: Port of the OSC server of the T-Stick. (Default: 8000)</li> </ul>"},{"location":"setup/json-settings/#settingsjson","title":"settings.json","text":"<p>The <code>settings.json</code> file holds the additional information that is displayed in the t-stick web portal. </p> <p>The default <code>settings.json</code> file is shown below.</p> <pre><code>{\n    \"settings\": [\n        {\n            \"name\": \"enable_libmapper\",\n            \"value\": 0\n        },\n        {\n            \"name\": \"fsr_offset\",\n            \"value\": 2000\n        },\n        {\n            \"name\": \"touch_noise\",\n            \"value\": 50\n        },\n        {\n            \"name\": \"jab_threshold\",\n            \"value\": 5\n        },\n        {\n            \"name\": \"battery_size_mah\",\n            \"value\": 2000\n        }\n    ]\n}\n</code></pre>"},{"location":"setup/json-settings/#properties_1","title":"Properties","text":"<ul> <li>fsr_offset: Set the minimum value of the FSR when no pressure is being applied. (Default: 2000)</li> <li>touch_noise: Set the minimum value before a touch input is registered. Only applies to T-Sticks that use the Trill board or the EnchantiTouch board. (Default: 50)</li> <li>jab_threshold: Set the sensitivity of the jab gesture. Larger values lower the sensitivity of the jab signal. (Default 5)</li> <li>battery_size-mah: Set the battery size in mAh. Only applies to T-Stick 5GW using the MAX17055/MAX17262 fuel gauge. (Default 2000)</li> </ul>"},{"location":"setup/wireless-settings/","title":"Changing your WiFi Settings","text":"<p>Note</p> <p>This page only applies to the T-Stick 4GW/5GW and their variants.</p> <p>To access the T-Stick Settings page, access the T-Stick Setup page using the instructions shown in the connection guide.</p>"},{"location":"setup/wireless-settings/#disabling-osc","title":"Disabling OSC","text":"<p>To disable OSC set the Primary IP field and the Secondary IP field <code>0.0.0.0</code>.</p> OSC Send Settings"},{"location":"setup/wireless-settings/#enablingdisabling-libmapper","title":"Enabling/Disabling Libmapper","text":"<p>Click the Settings option at the top of the page. To disable libmapper set the enable_libmapper setting to <code>0</code>.</p>"}]}